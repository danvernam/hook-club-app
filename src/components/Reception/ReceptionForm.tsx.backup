'use client';

import { useState, useMemo, useEffect } from 'react';
import Image from 'next/image';

type SongPreference = 'definitely' | 'maybe' | 'avoid' | '';

interface Song {
  song: string;
  artist: string;
  videoUrl: string;
}

interface SetlistSong extends Song {
  key: string;
  leadVocalist: string;
  backupVocalists: string[];
  notes: string;
  originalKey: string;
}

interface SongsDatabase {
  pop: Song[];
  soul: Song[];
  rock: Song[];
  hiphop: Song[];
  disco: Song[];
  instantmosh: Song[];
  country: Song[];
  latin: Song[];
  slowjams: Song[];
}

interface SpecialMoment {
  id: number;
  type: string;
  song: string;
  artist: string;
  videoUrl: string;
  notes: string;
}

const VOCALISTS = ['Ryan', 'Dan', 'Jesse', 'Bree', "L'Marco", 'Lucy', 'Tre'];
const KEYS = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'Am', 'Bbm', 'Bm', 'Cm', 'C#m', 'Dm', 'Ebm', 'Em', 'Fm', 'F#m', 'Gm'];

const SPECIAL_MOMENT_TYPES = [
  'Grand Entrance',
  'First Dance',
  'Parent Dance',
  'Cake Cutting',
  'Last Song',
  'Horah',
  'Mezinka Dance',
  'Anniversary Dance',
  'Bouquet Toss',
  'Garter Toss',
  'Other'
];

const SONG_SUGGESTIONS = {
  grandEntrance: [
    { song: "Crazy in Love", artist: "Beyoncé", videoUrl: "https://www.youtube.com/watch?v=ViwtNLUqkMY" },
    { song: "Uptown Funk", artist: "Bruno Mars", videoUrl: "https://www.youtube.com/watch?v=OPf0YbXqDm0" },
    { song: "24K Magic", artist: "Bruno Mars", videoUrl: "https://www.youtube.com/watch?v=UqyT8IEBkvY" },
    { song: "Let's Get It Started", artist: "Black Eyed Peas", videoUrl: "https://www.youtube.com/watch?v=IKqV7DB8Iwg" },
    { song: "All I Do Is Win", artist: "DJ Khaled", videoUrl: "https://www.youtube.com/watch?v=GGXzlRoNtHU" },
    { song: "Can't Stop The Feeling", artist: "Justin Timberlake", videoUrl: "https://www.youtube.com/watch?v=ru0K8uYEZWw" },
    { song: "Happy", artist: "Pharrell Williams", videoUrl: "https://www.youtube.com/watch?v=ZbZSe6N_BXs" },
    { song: "Celebration", artist: "Kool & The Gang", videoUrl: "https://www.youtube.com/watch?v=3GwjfUFyY6M" },
    { song: "September", artist: "Earth, Wind & Fire", videoUrl: "https://www.youtube.com/watch?v=Gs069dndIYk" },
    { song: "Levitating", artist: "Dua Lipa", videoUrl: "https://www.youtube.com/watch?v=TUVcZfQe-Kw" }
  ],
  firstDance: [
    { song: "Perfect", artist: "Ed Sheeran", videoUrl: "https://www.youtube.com/watch?v=2Vv-BfVoq4g" },
    { song: "Thinking Out Loud", artist: "Ed Sheeran", videoUrl: "https://www.youtube.com/watch?v=lp-EO5I60KA" },
    { song: "At Last", artist: "Etta James", videoUrl: "https://www.youtube.com/watch?v=S-cbOl96RFM" },
    { song: "All of Me", artist: "John Legend", videoUrl: "https://www.youtube.com/watch?v=450p7goxZqg" },
    { song: "A Thousand Years", artist: "Christina Perri", videoUrl: "https://www.youtube.com/watch?v=rtOvBOTyX00" },
    { song: "Make You Feel My Love", artist: "Adele", videoUrl: "https://www.youtube.com/watch?v=0put0_a--Ng" },
    { song: "Marry You", artist: "Bruno Mars", videoUrl: "https://www.youtube.com/watch?v=Jbql5eA1dqw" },
    { song: "Everything", artist: "Michael Bublé", videoUrl: "https://www.youtube.com/watch?v=SPUJIbXN0WY" },
    { song: "Can't Help Falling in Love", artist: "Elvis Presley", videoUrl: "https://www.youtube.com/watch?v=vGJTaP6anOU" },
    { song: "Lover", artist: "Taylor Swift", videoUrl: "https://www.youtube.com/watch?v=cvATBaL-91k" }
  ],
  parentDance: [
    { song: "What A Wonderful World", artist: "Louis Armstrong", videoUrl: "https://www.youtube.com/watch?v=VqhCQZaH4Vs" },
    { song: "Isn't She Lovely", artist: "Stevie Wonder", videoUrl: "https://www.youtube.com/watch?v=IVvkjuEAwgU" },
    { song: "My Girl", artist: "The Temptations", videoUrl: "https://www.youtube.com/watch?v=C_CSjcm-z1w" },
    { song: "Stand By Me", artist: "Ben E. King", videoUrl: "https://www.youtube.com/watch?v=hwZNL7QVJjE" },
    { song: "In My Life", artist: "The Beatles", videoUrl: "https://www.youtube.com/watch?v=YBcdt6DsLQA" },
    { song: "Unforgettable", artist: "Nat King Cole", videoUrl: "https://www.youtube.com/watch?v=vDN5rG3wLa4" },
    { song: "The Way You Look Tonight", artist: "Frank Sinatra", videoUrl: "https://www.youtube.com/watch?v=h9ZGKALMMuc" },
    { song: "You Are The Sunshine Of My Life", artist: "Stevie Wonder", videoUrl: "https://www.youtube.com/watch?v=6O8fwUfN8wQ" },
    { song: "Butterfly Kisses", artist: "Bob Carlisle", videoUrl: "https://www.youtube.com/watch?v=vmC3rRR95GA" },
    { song: "Forever Young", artist: "Rod Stewart", videoUrl: "https://www.youtube.com/watch?v=t5qURKt4maw" }
  ],
  cakeCutting: [
    { song: "Sugar, Sugar", artist: "The Archies", videoUrl: "https://www.youtube.com/watch?v=h9nE2spOw_o" },
    { song: "How Sweet It Is", artist: "James Taylor", videoUrl: "https://www.youtube.com/watch?v=29JvbBcJv3w" },
    { song: "Pour Some Sugar On Me", artist: "Def Leppard", videoUrl: "https://www.youtube.com/watch?v=0UIB9Y4OFPs" },
    { song: "Cake By The Ocean", artist: "DNCE", videoUrl: "https://www.youtube.com/watch?v=PAzH-YAlFYc" },
    { song: "Honey, Honey", artist: "ABBA", videoUrl: "https://www.youtube.com/watch?v=4P3L7BwGt9o" },
    { song: "Sugar", artist: "Maroon 5", videoUrl: "https://www.youtube.com/watch?v=09R8_2nJtjg" },
    { song: "Sweet Thing", artist: "Chaka Khan", videoUrl: "https://www.youtube.com/watch?v=0DhRXGNg4Ro" },
    { song: "Sugartown", artist: "Nancy Sinatra", videoUrl: "https://www.youtube.com/watch?v=7Hd0MxsaZxU" }
  ],
  lastSong: [
    { song: "Don't Stop Believin'", artist: "Journey", videoUrl: "https://www.youtube.com/watch?v=1k8craCGpgs" },
    { song: "Livin' On A Prayer", artist: "Bon Jovi", videoUrl: "https://www.youtube.com/watch?v=lDK9QqIzhwk" },
    { song: "Sweet Caroline", artist: "Neil Diamond", videoUrl: "https://www.youtube.com/watch?v=1vhFnTjia_I" },
    { song: "Shut Up And Dance", artist: "Walk The Moon", videoUrl: "https://www.youtube.com/watch?v=6JCLY0Rlx6Q" },
    { song: "Closing Time", artist: "Semisonic", videoUrl: "https://www.youtube.com/watch?v=xGytDsqkQY8" },
    { song: "All Star", artist: "Smash Mouth", videoUrl: "https://www.youtube.com/watch?v=L_jWHffIx5E" },
    { song: "Mr. Brightside", artist: "The Killers", videoUrl: "https://www.youtube.com/watch?v=gGdGFtwCNBE" },
    { song: "I Wanna Dance With Somebody", artist: "Whitney Houston", videoUrl: "https://www.youtube.com/watch?v=eH3giaIzONA" }
  ],
  processional: {
    'wedding-party': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ],
    'bridesmaids': [
      { song: "A Thousand Years", artist: "Christina Perri", videoUrl: "https://www.youtube.com/watch?v=rtOvBOTyX00" },
      { song: "Perfect", artist: "Ed Sheeran", videoUrl: "https://www.youtube.com/watch?v=2Vv-BfVoq4g" },
      { song: "All of Me", artist: "John Legend", videoUrl: "https://www.youtube.com/watch?v=450p7goxZqg" },
      { song: "Marry You", artist: "Bruno Mars", videoUrl: "https://www.youtube.com/watch?v=Jbql5eA1dqw" },
      { song: "At Last", artist: "Etta James", videoUrl: "https://www.youtube.com/watch?v=S-cbOl96RFM" }
    ],
    'groomsmen': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ],
    'bridal-processional': [
      { song: "Bridal Chorus (Here Comes the Bride)", artist: "Richard Wagner", videoUrl: "https://www.youtube.com/watch?v=7X7l5a3WqkE" },
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "A Thousand Years", artist: "Christina Perri", videoUrl: "https://www.youtube.com/watch?v=rtOvBOTyX00" },
      { song: "Perfect", artist: "Ed Sheeran", videoUrl: "https://www.youtube.com/watch?v=2Vv-BfVoq4g" },
      { song: "All of Me", artist: "John Legend", videoUrl: "https://www.youtube.com/watch?v=450p7goxZqg" },
      { song: "At Last", artist: "Etta James", videoUrl: "https://www.youtube.com/watch?v=S-cbOl96RFM" }
    ],
    'family': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ],
    'flower-girl': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ],
    'ring-bearer': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ],
    'other': [
      { song: "Canon in D", artist: "Johann Pachelbel", videoUrl: "https://www.youtube.com/watch?v=8Af372EQLck" },
      { song: "Air on the G String", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=ho9rZjlsyYY" },
      { song: "Jesu, Joy of Man's Desiring", artist: "Johann Sebastian Bach", videoUrl: "https://www.youtube.com/watch?v=YyknBTm_YyM" },
      { song: "The Four Seasons - Spring", artist: "Antonio Vivaldi", videoUrl: "https://www.youtube.com/watch?v=GRxofEmo3HA" }
    ]
  }
};

const GENRE_TITLES: Record<string, string> = {
  pop: "💯 Cream Of The Pop",
  soul: "🎷 Souled Out",
  rock: "🎸 Rock Of Ages",
  hiphop: "🎧 Can't-Stop Hip-Hop",
  disco: "🕺 Studio '25",
  instantmosh: "🤘 Instant Mosh",
  country: "🤠 Country For All",
  latin: "🔥 The Latin Bible",
  slowjams: "🎶 Slow Jams",
  reggae: "🌴 Reggae Vibes"
};

const GENRE_STATUS: Record<string, boolean> = {
  pop: true,
  soul: true,
  rock: true,
  hiphop: true,
  disco: true,
  instantmosh: true,
  country: true,
  latin: true,
  slowjams: true,
  reggae: false // Demo inactive genre
};

export default function ReceptionForm() {
  const [mainTab, setMainTab] = useState<'general' | 'eventinfo' | 'contacts' | 'gettingtoknow' | 'ceremony' | 'cocktail' | 'reception' | 'afterparty' | 'welcome' | 'vendor-recommendations'>('general');
  const [showBandPrep, setShowBandPrep] = useState(false);
  const [eventInfo, setEventInfo] = useState({
    guestAttire: '',
    thcDress: '',
    vendorMealLocation: '',
    vendorMealService: '',
    rainPlan: ''
  });
  const [receptionTab, setReceptionTab] = useState<'special' | 'requests' | 'songlist'>('special');
  const [bandPrepTab, setBandPrepTab] = useState<'selection' | 'setlist' | 'database' | 'genres'>('selection');
  const [preferences, setPreferences] = useState<Record<string, SongPreference>>({});
  const [selectedForSetlist, setSelectedForSetlist] = useState<Set<string>>(new Set());
  const [setlistSongs, setSetlistSongs] = useState<SetlistSong[]>([]);
  const [specialMoments, setSpecialMoments] = useState<SpecialMoment[]>([]);
  const [songsData, setSongsData] = useState<SongsDatabase | null>(null);
  const [loading, setLoading] = useState(true);
  const [expandedGenres, setExpandedGenres] = useState<Set<string>>(new Set());
  const [vendors, setVendors] = useState<Array<{id: number, type: string, name: string, email: string, instagram: string}>>([]);
  const [ceremonyTab, setCeremonyTab] = useState<'guest-arrival' | 'processional' | 'ceremony-music'>('guest-arrival');
  const [ceremonySpecialMoments, setCeremonySpecialMoments] = useState<Array<{id: number, type: string, song: string, artist: string, notes: string}>>([]);
  const [summaryTab, setSummaryTab] = useState<'reception' | 'ceremony' | 'cocktail' | 'afterparty'>('reception');
  const [activeGenre, setActiveGenre] = useState<string>('pop');
  const [editingSong, setEditingSong] = useState<any>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [songFilter, setSongFilter] = useState<'all' | 'live' | 'inactive'>('live');
  const [songSort, setSongSort] = useState<'title' | 'artist'>('title');
  const [songSearch, setSongSearch] = useState('');
  const [genreStatus, setGenreStatus] = useState<Record<string, boolean>>(GENRE_STATUS);
  const [fullSongsData, setFullSongsData] = useState<any>(null);
  const [databaseTab, setDatabaseTab] = useState<'dashboard' | 'database'>('dashboard');
  const [processionalSongs, setProcessionalSongs] = useState<Array<{id: number, category: string, walkerCount: string, title: string, artist: string, youtubeLink: string, notes: string}>>([{
    id: Date.now(),
    category: '',
    walkerCount: '',
    title: '',
    artist: '',
    youtubeLink: '',
    notes: ''
  }]);
  const [recessionalSong, setRecessionalSong] = useState<{title: string, artist: string, youtubeLink: string, performanceStyle: string, notes: string}>({
    title: '',
    artist: '',
    youtubeLink: '',
    performanceStyle: '',
    notes: ''
  });
  const [guestArrivalRequests, setGuestArrivalRequests] = useState<Array<{id: number, song: string, artist: string, link: string, notes: string}>>([]);
  const [receptionRequests, setReceptionRequests] = useState<Array<{id: number, type: string, song: string, artist: string, link: string, notes: string}>>([]);
  const [cocktailRequests, setCocktailRequests] = useState<Array<{id: number, song: string, artist: string, link: string, notes: string}>>([]);
  const [cocktailSpecialMoments, setCocktailSpecialMoments] = useState<Array<{id: number, type: string, song: string, artist: string, link: string, notes: string}>>([]);
  const [afterpartyRequests, setAfterpartyRequests] = useState<Array<{id: number, song: string, artist: string, link: string, notes: string}>>([]);
  const [welcomeRequests, setWelcomeRequests] = useState<Array<{id: number, song: string, artist: string, link: string, notes: string}>>([]);
  const [welcomePlaylist, setWelcomePlaylist] = useState('');
  const [afterpartyPlaylist, setAfterpartyPlaylist] = useState('');
  const [playlistLinks, setPlaylistLinks] = useState<Array<{id: number, type: string, link: string}>>([]);
  const [ceremonyPlaylists, setCeremonyPlaylists] = useState<Array<{id: number, type: string, link: string}>>([]);
  const [cocktailPlaylists, setCocktailPlaylists] = useState<Array<{id: number, type: string, link: string}>>([]);
  const [dinnerPlaylist, setDinnerPlaylist] = useState('');
  const [dinnerPlaylistNotes, setDinnerPlaylistNotes] = useState('');

  useEffect(() => {
    fetch('/data/songs.json')
      .then(res => res.json())
      .then(data => {
        // Transform the new structure to match the old format for compatibility
        const transformedData: Record<string, any[]> = {};
        Object.keys(data.genres).forEach(genreKey => {
          const genre = data.genres[genreKey];
          if (genre.isActive) {
            transformedData[genreKey] = data.songs
              .filter((song: any) => song.genre === genreKey && song.isLive)
              .map((song: any) => ({
                song: song.thcTitle || song.originalTitle,
                artist: song.thcArtist || song.originalArtist,
                videoUrl: song.videoUrl
              }));
          }
        });
        
        setSongsData(transformedData as unknown as SongsDatabase);
        setFullSongsData(data);
        setLoading(false);
      })
      .catch(err => {
        console.error('Error loading songs:', err);
        setLoading(false);
      });
  }, []);

  const songCounts = useMemo(() => {
    const counts = { definitely: 0, maybe: 0, avoid: 0 };
    Object.values(preferences).forEach(pref => {
      if (pref === 'definitely') counts.definitely++;
      if (pref === 'maybe') counts.maybe++;
      if (pref === 'avoid') counts.avoid++;
    });
    return counts;
  }, [preferences]);

  const togglePreference = (key: string, pref: SongPreference) => {
    setPreferences(prev => ({
      ...prev,
      [key]: prev[key] === pref ? '' : pref
    }));
  };

  const toggleGenre = (genre: string) => {
    setExpandedGenres(prev => {
      const newSet = new Set(prev);
      if (newSet.has(genre)) {
        newSet.delete(genre);
      } else {
        newSet.add(genre);
      }
      return newSet;
    });
  };

  const addSpecialMoment = () => {
    setSpecialMoments([...specialMoments, {
      id: Date.now(),
      type: '',
      song: '',
      artist: '',
      videoUrl: '',
      notes: ''
    }]);
  };

  const updateSpecialMoment = (id: number, field: keyof SpecialMoment, value: string) => {
    setSpecialMoments(prev => prev.map(moment => 
      moment.id === id ? { ...moment, [field]: value } : moment
    ));
  };

  const selectPopularSong = (id: number, song: { song: string; artist: string; videoUrl: string }) => {
    setSpecialMoments(prev => prev.map(moment =>
      moment.id === id ? { ...moment, song: song.song, artist: song.artist, videoUrl: song.videoUrl } : moment
    ));
  };


  const removeSpecialMoment = (id: number) => {
    setSpecialMoments(prev => prev.filter(moment => moment.id !== id));
  };

  const addVendor = () => {
    setVendors([...vendors, {
      id: Date.now(),
      type: '',
      name: '',
      email: '',
      instagram: ''
    }]);
  };

  const updateVendor = (id: number, field: string, value: string) => {
    setVendors(prev => prev.map(vendor => 
      vendor.id === id ? { ...vendor, [field]: value } : vendor
    ));
  };

  const removeVendor = (id: number) => {
    setVendors(prev => prev.filter(vendor => vendor.id !== id));
  };


  const addCeremonySpecialMoment = () => {
    setCeremonySpecialMoments([...ceremonySpecialMoments, {
      id: Date.now(),
      type: '',
      song: '',
      artist: '',
      notes: ''
    }]);
  };

  const updateCeremonySpecialMoment = (id: number, field: string, value: string) => {
    setCeremonySpecialMoments(prev => prev.map(moment => 
      moment.id === id ? { ...moment, [field]: value } : moment
    ));
  };

  const removeCeremonySpecialMoment = (id: number) => {
    setCeremonySpecialMoments(prev => prev.filter(moment => moment.id !== id));
  };

  const selectPopularProcessionalSong = (index: number, song: { song: string; artist: string; videoUrl: string }) => {
    setProcessionalSongs(prev => prev.map((processionalSong, i) => 
      i === index ? { ...processionalSong, title: song.song, artist: song.artist, youtubeLink: song.videoUrl } : processionalSong
    ));
  };

  const addProcessionalSong = () => {
    setProcessionalSongs([...processionalSongs, {
      id: Date.now(),
      category: '',
      walkerCount: '',
      title: '',
      artist: '',
      youtubeLink: '',
      notes: ''
    }]);
  };

  const updateProcessionalSong = (index: number, field: string, value: string) => {
    setProcessionalSongs(prev => prev.map((song, i) => 
      i === index ? { ...song, [field]: value } : song
    ));
  };

  const removeProcessionalSong = (index: number) => {
    if (processionalSongs.length > 1) {
      setProcessionalSongs(prev => prev.filter((_, i) => i !== index));
    }
  };


  const addGuestArrivalRequest = () => {
    if (guestArrivalRequests.length < 2) {
      setGuestArrivalRequests([...guestArrivalRequests, {
        id: Date.now(),
        song: '',
        artist: '',
        link: '',
        notes: ''
      }]);
    }
  };

  const updateGuestArrivalRequest = (id: number, field: string, value: string) => {
    setGuestArrivalRequests(prev => prev.map(req => 
      req.id === id ? { ...req, [field]: value } : req
    ));
  };

  const removeGuestArrivalRequest = (id: number) => {
    setGuestArrivalRequests(prev => prev.filter(req => req.id !== id));
  };

  const addReceptionRequest = () => {
    setReceptionRequests([...receptionRequests, {
      id: Date.now(),
      type: '',
      song: '',
      artist: '',
      link: '',
      notes: ''
    }]);
  };

  const updateReceptionRequest = (id: number, field: string, value: string) => {
    setReceptionRequests(prev => prev.map(req => 
      req.id === id ? { ...req, [field]: value } : req
    ));
  };

  const removeReceptionRequest = (id: number) => {
    setReceptionRequests(prev => prev.filter(req => req.id !== id));
  };

  const addPlaylistLink = () => {
    setPlaylistLinks([...playlistLinks, {
      id: Date.now(),
      type: '',
      link: ''
    }]);
  };

  const removePlaylistLink = (id: number) => {
    setPlaylistLinks(prev => prev.filter(playlist => playlist.id !== id));
  };

  const updatePlaylistLink = (id: number, field: string, value: string) => {
    setPlaylistLinks(prev => prev.map(playlist => 
      playlist.id === id ? { ...playlist, [field]: value } : playlist
    ));
  };

  const addCeremonyPlaylist = () => {
    setCeremonyPlaylists([...ceremonyPlaylists, {
      id: Date.now(),
      type: '',
      link: ''
    }]);
  };

  const removeCeremonyPlaylist = (id: number) => {
    setCeremonyPlaylists(prev => prev.filter(playlist => playlist.id !== id));
  };

  const updateCeremonyPlaylist = (id: number, field: string, value: string) => {
    setCeremonyPlaylists(prev => prev.map(playlist => 
      playlist.id === id ? { ...playlist, [field]: value } : playlist
    ));
  };

  const addCocktailPlaylist = () => {
    setCocktailPlaylists([...cocktailPlaylists, {
      id: Date.now(),
      type: '',
      link: ''
    }]);
  };

  const removeCocktailPlaylist = (id: number) => {
    setCocktailPlaylists(prev => prev.filter(playlist => playlist.id !== id));
  };

  const updateCocktailPlaylist = (id: number, field: string, value: string) => {
    setCocktailPlaylists(prev => prev.map(playlist => 
      playlist.id === id ? { ...playlist, [field]: value } : playlist
    ));
  };

  const addCocktailRequest = () => {
    if (cocktailRequests.length < 2) {
      setCocktailRequests([...cocktailRequests, {
        id: Date.now(),
        song: '',
        artist: '',
        link: '',
        notes: ''
      }]);
    }
  };

  const updateCocktailRequest = (id: number, field: string, value: string) => {
    setCocktailRequests(prev => prev.map(req => 
      req.id === id ? { ...req, [field]: value } : req
    ));
  };

  const removeCocktailRequest = (id: number) => {
    setCocktailRequests(prev => prev.filter(req => req.id !== id));
  };

  const addCocktailSpecialMoment = () => {
    setCocktailSpecialMoments([...cocktailSpecialMoments, {
      id: Date.now(),
      type: '',
      song: '',
      artist: '',
      link: '',
      notes: ''
    }]);
  };

  const updateCocktailSpecialMoment = (id: number, field: string, value: string) => {
    setCocktailSpecialMoments(prev => prev.map(moment => 
      moment.id === id ? { ...moment, [field]: value } : moment
    ));
  };

  const removeCocktailSpecialMoment = (id: number) => {
    setCocktailSpecialMoments(prev => prev.filter(moment => moment.id !== id));
  };

  const addAfterpartyRequest = () => {
    if (afterpartyRequests.length < 5) {
      setAfterpartyRequests([...afterpartyRequests, {
        id: Date.now(),
        song: '',
        artist: '',
        link: '',
        notes: ''
      }]);
    }
  };

  const updateAfterpartyRequest = (id: number, field: string, value: string) => {
    setAfterpartyRequests(prev => prev.map(req => 
      req.id === id ? { ...req, [field]: value } : req
    ));
  };

  const removeAfterpartyRequest = (id: number) => {
    setAfterpartyRequests(prev => prev.filter(req => req.id !== id));
  };

  const addWelcomeRequest = () => {
    if (welcomeRequests.length < 5) {
      setWelcomeRequests([...welcomeRequests, {
        id: Date.now(),
        song: '',
        artist: '',
        link: '',
        notes: ''
      }]);
    }
  };

  const updateWelcomeRequest = (id: number, field: string, value: string) => {
    setWelcomeRequests(prev => prev.map(req => 
      req.id === id ? { ...req, [field]: value } : req
    ));
  };

  const removeWelcomeRequest = (id: number) => {
    setWelcomeRequests(prev => prev.filter(req => req.id !== id));
  };


  const SongRow = ({ song, artist, videoUrl, prefKey }: { song: string; artist: string; videoUrl: string; prefKey: string }) => (
    <div className="flex items-center justify-between p-2 border border-gray-200 rounded hover:bg-gray-50">
      <div className="flex-1 min-w-0">
        <a href={videoUrl} target="_blank" rel="noopener noreferrer" className="font-semibold text-purple-600 hover:text-purple-800 transition-colors text-sm underline">
          {song}
        </a>
        <span className="text-gray-600 text-sm"> • {artist}</span>
      </div>
      <div className="flex gap-2 ml-2">
        <button
          onClick={(e) => {
            e.preventDefault();
            togglePreference(prefKey, 'definitely');
          }}
          className={`px-3 py-1 text-xs border-2 rounded transition-all ${
            preferences[prefKey] === 'definitely' 
              ? 'border-green-500 bg-green-50 text-green-700' 
              : 'border-gray-300 hover:border-green-500 text-gray-600'
          }`}
        >
          Definitely Play!
        </button>
        <button
          onClick={(e) => {
            e.preventDefault();
            togglePreference(prefKey, 'maybe');
          }}
          className={`px-3 py-1 text-xs border-2 rounded transition-all ${
            preferences[prefKey] === 'maybe' 
              ? 'border-yellow-500 bg-yellow-50 text-yellow-700' 
              : 'border-gray-300 hover:border-yellow-500 text-gray-600'
          }`}
        >
          If The Mood Is Right..
        </button>
        <button
          onClick={(e) => {
            e.preventDefault();
            togglePreference(prefKey, 'avoid');
          }}
          className={`px-3 py-1 text-xs border-2 rounded transition-all ${
            preferences[prefKey] === 'avoid' 
              ? 'border-red-500 bg-red-50 text-red-700' 
              : 'border-gray-300 hover:border-red-500 text-gray-600'
          }`}
        >
          Avoid Playing
        </button>
      </div>
    </div>
  );

  const PopularSongCard = ({ song, artist, videoUrl, onSelect }: { song: string; artist: string; videoUrl: string; onSelect: () => void }) => (
    <div className="bg-white border-2 border-gray-300 rounded p-3 hover:border-gray-500 transition-all">
      <a href={videoUrl} target="_blank" rel="noopener noreferrer" className="block mb-2">
        <div className="font-semibold text-purple-600 hover:text-purple-800 text-sm">{song}</div>
        <div className="text-gray-600 text-xs">{artist}</div>
      </a>
      <button
        onClick={onSelect}
        className="w-full px-3 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700 transition-all"
      >
        Select This Song
      </button>
    </div>
  );

  const SpecialMomentForm = ({ moment }: { moment: SpecialMoment }) => {
    const getSuggestions = () => {
      const type = moment.type.toLowerCase().replace(/\s+/g, '');
      if (type.includes('entrance')) return SONG_SUGGESTIONS.grandEntrance;
      if (type.includes('first')) return SONG_SUGGESTIONS.firstDance;
      if (type.includes('parent')) return SONG_SUGGESTIONS.parentDance;
      if (type.includes('cake')) return SONG_SUGGESTIONS.cakeCutting;
      if (type.includes('last')) return SONG_SUGGESTIONS.lastSong;
      return [];
    };

    const suggestions = getSuggestions();

    return (
      <div className="bg-white p-4 rounded border-2 border-gray-200">
        <div className="flex justify-between items-start mb-3">
          <select
            value={moment.type}
            onChange={(e) => updateSpecialMoment(moment.id, 'type', e.target.value)}
            className="flex-1 p-2 border-2 border-gray-300 rounded text-sm text-gray-900"
          >
            <option value="">Select moment type...</option>
            {SPECIAL_MOMENT_TYPES.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
          <button
            onClick={() => removeSpecialMoment(moment.id)}
            className="ml-2 px-2 py-1 bg-red-100 text-red-700 rounded text-xs hover:bg-red-200"
          >
            Remove
          </button>
        </div>

        {suggestions.length > 0 && (
          <div className="mb-3">
            <div className="text-xs font-semibold text-gray-700 mb-2">💡 Popular Selections - Click to watch, select to use:</div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 max-h-64 overflow-y-auto p-2 bg-gray-50 rounded">
              {suggestions.map((s, i) => (
                <PopularSongCard
                  key={i}
                  song={s.song}
                  artist={s.artist}
                  videoUrl={s.videoUrl}
                  onSelect={() => selectPopularSong(moment.id, s)}
                />
              ))}
            </div>
          </div>
        )}

        <div className="grid grid-cols-2 gap-2 mb-2">
          <input
            type="text"
            placeholder="Song"
            value={moment.song}
            onChange={(e) => updateSpecialMoment(moment.id, 'song', e.target.value)}
            className="w-full p-2 border-2 border-gray-300 rounded text-sm text-gray-900 placeholder:text-gray-500"
          />
          <input
            type="text"
            placeholder="Artist"
            value={moment.artist}
            onChange={(e) => updateSpecialMoment(moment.id, 'artist', e.target.value)}
            className="w-full p-2 border-2 border-gray-300 rounded text-sm text-gray-900 placeholder:text-gray-500"
          />
        </div>
        <input
          type="url"
          placeholder="Spotify/YouTube Link (optional)"
          value={moment.videoUrl}
          onChange={(e) => updateSpecialMoment(moment.id, 'videoUrl', e.target.value)}
          className="w-full p-2 border-2 border-gray-300 rounded mb-2 text-sm text-gray-900 placeholder:text-gray-500"
        />
        <input
          type="text"
          placeholder="Notes"
          value={moment.notes}
          onChange={(e) => updateSpecialMoment(moment.id, 'notes', e.target.value)}
          className="w-full p-2 border-2 border-gray-300 rounded text-sm text-gray-900 placeholder:text-gray-500"
        />
      </div>
    );
  };

  if (loading) {
    return (
      <div className="max-w-5xl mx-auto p-8 text-center">
        <div className="text-xl text-gray-600">Loading song library...</div>
      </div>
    );
  }

  if (showBandPrep) {
    return (
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-8 pb-6 border-b-4 border-gray-900">
          <div className="flex justify-center mb-4">
            <Image 
              src="/hook-club-logo.png" 
              alt="The Hook Club" 
              width={300} 
              height={120}
              priority
            />
          </div>
          <p className="text-xl italic text-gray-700">The Hook Club - Planning Portal</p>
          <p className="text-gray-600 mt-2">Aretha Franklin & Ted White • Wedding</p>
          <p className="text-gray-600 font-semibold">Saturday 4/20/1961 • The Plaza Hotel, New York</p>
        </div>

        <button
          onClick={() => setShowBandPrep(false)}
          className="mb-6 px-6 py-3 bg-gray-600 text-white rounded font-semibold hover:bg-gray-700"
        >
          ← Back to Event Details
        </button>

        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Band Prep</h2>
          </div>

          <div className="mb-6">
            <div className="bg-gray-100 p-2 rounded-lg">
              <div className="flex gap-2">
                <button
                  onClick={() => setBandPrepTab('selection')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    bandPrepTab === 'selection' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Song Selection
                </button>
                <button
                  onClick={() => setBandPrepTab('setlist')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    bandPrepTab === 'setlist' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Setlist Builder ({setlistSongs.length})
                </button>
                <button
                  onClick={() => setBandPrepTab('database')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    bandPrepTab === 'database' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Songs Database
                </button>
                <button
                  onClick={() => setBandPrepTab('genres')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    bandPrepTab === 'genres' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Genre Management
                </button>
              </div>
            </div>
          </div>

          {bandPrepTab === 'selection' && (
            <>
              <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
                <h3 className="text-lg font-bold text-black mb-2">Client Preferences Summary</h3>
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div className="bg-white border border-gray-500 rounded p-2">
                    <div className="text-xl font-bold text-purple-700">{songCounts.definitely}</div>
                    <div className="text-xs text-gray-700">Definitely Play!</div>
                  </div>
                  <div className="bg-white border border-yellow-500 rounded p-2">
                    <div className="text-xl font-bold text-purple-700">{songCounts.maybe}</div>
                    <div className="text-xs text-gray-700">If Mood Is Right</div>
                  </div>
                  <div className="bg-white border border-gray-500 rounded p-2">
                    <div className="text-xl font-bold text-purple-700">{selectedForSetlist.size}</div>
                    <div className="text-xs text-gray-700">Selected</div>
                  </div>
                </div>
              </div>

              <div className="space-y-6">
                <div className="p-4 bg-white rounded-lg border-2 border-gray-500">
                  <h3 className="text-lg font-bold text-black mb-4">Definitely Play! (Priority Songs)</h3>
                  {Object.entries(preferences)
                    .filter(([_, pref]) => pref === 'definitely')
                    .length === 0 ? (
                    <p className="text-gray-600 italic">No songs marked as &quot;Definitely Play!&quot; yet</p>
                  ) : (
                    <div className="space-y-2">
                      {Object.entries(preferences)
                        .filter(([_, pref]) => pref === 'definitely')
                        .map(([key]) => {
                          const [genre, index] = key.split('-');
                          const song = songsData?.[genre as keyof SongsDatabase]?.[parseInt(index)];
                          if (!song) return null;
                          
                          const isSelected = selectedForSetlist.has(key);
                          
                          return (
                            <div key={key} className="flex items-center justify-between p-3 bg-white border border-gray-200 rounded">
                              <div className="flex-1">
                                <div className="font-semibold text-black">{song.song}</div>
                                <div className="text-sm text-gray-600">{song.artist}</div>
                              </div>
                              <button
                                onClick={() => {
                                  const newSet = new Set(selectedForSetlist);
                                  if (isSelected) {
                                    newSet.delete(key);
                                    setSetlistSongs(prev => prev.filter(s => s.originalKey !== key));
                                  } else {
                                    newSet.add(key);
                                    setSetlistSongs(prev => [...prev, {
                                      ...song,
                                      originalKey: key,
                                      key: '',
                                      leadVocalist: '',
                                      backupVocalists: [],
                                      notes: ''
                                    }]);
                                  }
                                  setSelectedForSetlist(newSet);
                                }}
                                className={`px-4 py-2 rounded font-semibold transition-all ${
                                  isSelected
                                    ? 'bg-purple-600 text-white hover:bg-purple-700'
                                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                }`}
                              >
                                {isSelected ? '✓ In Setlist' : 'Add to Setlist'}
                              </button>
                            </div>
                          );
                        })}
                    </div>
                  )}
                </div>

                <div className="p-4 bg-white rounded-lg border-2 border-yellow-500">
                  <h3 className="text-lg font-bold text-black mb-4">If The Mood Is Right.. (Optional Songs)</h3>
                  {Object.entries(preferences)
                    .filter(([_, pref]) => pref === 'maybe')
                    .length === 0 ? (
                    <p className="text-gray-600 italic">No songs marked as &quot;If The Mood Is Right..&quot; yet</p>
                  ) : (
                    <div className="space-y-2">
                      {Object.entries(preferences)
                        .filter(([_, pref]) => pref === 'maybe')
                        .map(([key]) => {
                          const [genre, index] = key.split('-');
                          const song = songsData?.[genre as keyof SongsDatabase]?.[parseInt(index)];
                          if (!song) return null;
                          
                          const isSelected = selectedForSetlist.has(key);
                          
                          return (
                            <div key={key} className="flex items-center justify-between p-3 bg-white border border-gray-200 rounded">
                              <div className="flex-1">
                                <div className="font-semibold text-black">{song.song}</div>
                                <div className="text-sm text-gray-600">{song.artist}</div>
                              </div>
                              <button
                                onClick={() => {
                                  const newSet = new Set(selectedForSetlist);
                                  if (isSelected) {
                                    newSet.delete(key);
                                    setSetlistSongs(prev => prev.filter(s => s.originalKey !== key));
                                  } else {
                                    newSet.add(key);
                                    setSetlistSongs(prev => [...prev, {
                                      ...song,
                                      originalKey: key,
                                      key: '',
                                      leadVocalist: '',
                                      backupVocalists: [],
                                      notes: ''
                                    }]);
                                  }
                                  setSelectedForSetlist(newSet);
                                }}
                                className={`px-4 py-2 rounded font-semibold transition-all ${
                                  isSelected
                                    ? 'bg-purple-600 text-white hover:bg-purple-700'
                                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                }`}
                              >
                                {isSelected ? '✓ In Setlist' : 'Add to Setlist'}
                              </button>
                            </div>
                          );
                        })}
                    </div>
                  )}
                </div>

                <div className="p-4 bg-red-50 rounded-lg border-2 border-red-500">
                  <h3 className="text-lg font-bold text-black mb-4">Avoid Playing (Do Not Include)</h3>
                  {Object.entries(preferences)
                    .filter(([_, pref]) => pref === 'avoid')
                    .length === 0 ? (
                    <p className="text-gray-600 italic">No songs marked to avoid</p>
                  ) : (
                    <div className="space-y-2">
                      {Object.entries(preferences)
                        .filter(([_, pref]) => pref === 'avoid')
                        .map(([key]) => {
                          const [genre, index] = key.split('-');
                          const song = songsData?.[genre as keyof SongsDatabase]?.[parseInt(index)];
                          if (!song) return null;
                          
                          return (
                            <div key={key} className="flex items-center p-3 bg-white border border-red-200 rounded opacity-60">
                              <div className="flex-1">
                                <div className="font-semibold text-black line-through">{song.song}</div>
                                <div className="text-sm text-gray-600">{song.artist}</div>
                              </div>
                              <span className="text-red-600 font-semibold text-sm">DO NOT PLAY</span>
                            </div>
                          );
                        })}
                    </div>
                  )}
                </div>
              </div>

              {selectedForSetlist.size > 0 && (
                <div className="mt-6 p-4 bg-white border-2 border-gray-500 rounded-lg">
                  <h3 className="text-lg font-bold text-black mb-3">Ready to Build Setlist</h3>
                  <p className="text-gray-700 mb-3">
                    You&apos;ve selected <strong>{selectedForSetlist.size} songs</strong>. Click the Setlist Builder tab to arrange them and assign vocalists.
                  </p>
                </div>
              )}
            </>
          )}

          {bandPrepTab === 'setlist' && (
            <>
              {setlistSongs.length === 0 ? (
                <div className="p-8 text-center border-2 border-dashed border-gray-300 rounded-lg">
                  <p className="text-gray-600 text-lg mb-2">No songs in setlist yet</p>
                  <p className="text-gray-500 text-sm">Go to Song Selection tab to add songs</p>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="p-4 bg-gray-100 rounded-lg border-2 border-gray-300">
                    <h3 className="text-lg font-bold text-black mb-2">Setlist Overview</h3>
                    <div className="text-sm text-gray-700">
                      <strong>{setlistSongs.length} songs</strong> selected
                    </div>
                  </div>

                  <div className="space-y-3">
                    {setlistSongs.map((song, index) => (
                      <div key={index} className="p-4 bg-white border-2 border-gray-300 rounded-lg">
                        <div className="flex items-start gap-4">
                          <div className="flex flex-col gap-2">
                            <button
                              onClick={() => {
                                if (index === 0) return;
                                const newList = [...setlistSongs];
                                [newList[index - 1], newList[index]] = [newList[index], newList[index - 1]];
                                setSetlistSongs(newList);
                              }}
                              disabled={index === 0}
                              className="px-2 py-1 bg-gray-200 rounded text-xs disabled:opacity-30"
                            >
                              ↑
                            </button>
                            <div className="text-center font-bold text-gray-700">#{index + 1}</div>
                            <button
                              onClick={() => {
                                if (index === setlistSongs.length - 1) return;
                                const newList = [...setlistSongs];
                                [newList[index + 1], newList[index]] = [newList[index], newList[index + 1]];
                                setSetlistSongs(newList);
                              }}
                              disabled={index === setlistSongs.length - 1}
                              className="px-2 py-1 bg-gray-200 rounded text-xs disabled:opacity-30"
                            >
                              ↓
                            </button>
                          </div>

                          <div className="flex-1">
                            <div className="font-bold text-lg text-black mb-1">{song.song}</div>
                            <div className="text-sm text-gray-600 mb-3">{song.artist}</div>

                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <label className="block text-xs font-semibold text-gray-700 mb-1">Key</label>
                                <select
                                  value={song.key}
                                  onChange={(e) => {
                                    const newList = [...setlistSongs];
                                    newList[index].key = e.target.value;
                                    setSetlistSongs(newList);
                                  }}
                                  className="w-full p-2 border-2 border-gray-300 rounded text-sm"
                                >
                                  <option value="">Select key...</option>
                                  {KEYS.map(k => (
                                    <option key={k} value={k}>{k}</option>
                                  ))}
                                </select>
                              </div>

                              <div>
                                <label className="block text-xs font-semibold text-gray-700 mb-1">Lead Vocalist</label>
                                <select
                                  value={song.leadVocalist}
                                  onChange={(e) => {
                                    const newList = [...setlistSongs];
                                    newList[index].leadVocalist = e.target.value;
                                    setSetlistSongs(newList);
                                  }}
                                  className="w-full p-2 border-2 border-gray-300 rounded text-sm"
                                >
                                  <option value="">Select vocalist...</option>
                                  {VOCALISTS.map(v => (
                                    <option key={v} value={v}>{v}</option>
                                  ))}
                                </select>
                              </div>
                            </div>

                            <div className="mt-3">
                              <label className="block text-xs font-semibold text-gray-700 mb-1">Notes / Arrangement</label>
                              <input
                                type="text"
                                value={song.notes}
                                onChange={(e) => {
                                  const newList = [...setlistSongs];
                                  newList[index].notes = e.target.value;
                                  setSetlistSongs(newList);
                                }}
                                placeholder="Transitions, breakdowns, special instructions..."
                                className="w-full p-2 border-2 border-gray-300 rounded text-sm"
                              />
                            </div>
                          </div>

                          <button
                            onClick={() => {
                              const newList = setlistSongs.filter((_, i) => i !== index);
                              setSetlistSongs(newList);
                              selectedForSetlist.delete(song.originalKey);
                              setSelectedForSetlist(new Set(selectedForSetlist));
                            }}
                            className="px-3 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 text-sm font-semibold"
                          >
                            Remove
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 p-4 bg-white border-2 border-gray-200 rounded-lg">
                    <h3 className="text-lg font-bold text-black mb-2">Export Setlist</h3>
                    <button className="px-6 py-3 bg-purple-600 text-white rounded font-semibold hover:bg-purple-700">
                      Print/Export Setlist
                    </button>
                    <p className="text-sm text-gray-600 mt-2 italic">Coming soon: Print-ready setlist with all details</p>
                  </div>
                </div>
              )}
            </>
          )}

          {bandPrepTab === 'database' && songsData && (
                <>
                  <div className="mb-6">
                    <h2 className="text-2xl font-bold text-black mb-2">🎵 Songs Database</h2>
                    <p className="text-gray-600">Manage your song catalog and view performance analytics</p>
                  </div>

              {/* Database Sub-tabs */}
              <div className="mb-6">
                <div className="bg-gray-100 p-1 rounded-lg inline-flex">
                  <button
                    onClick={() => setDatabaseTab('dashboard')}
                    className={`px-4 py-2 rounded-md font-medium transition-all ${
                      databaseTab === 'dashboard' 
                        ? 'bg-white text-black shadow-sm' 
                        : 'text-gray-600 hover:text-black'
                    }`}
                  >
                    📊 Dashboard
                  </button>
                  <button
                    onClick={() => setDatabaseTab('database')}
                    className={`px-4 py-2 rounded-md font-medium transition-all ${
                      databaseTab === 'database' 
                        ? 'bg-white text-black shadow-sm' 
                        : 'text-gray-600 hover:text-black'
                    }`}
                  >
                    📋 Full Database
                  </button>
                </div>
              </div>

              {databaseTab === 'dashboard' && (
                <>
                  <div className="mb-6">
                    <h3 className="text-xl font-bold text-black mb-2">📊 Analytics Dashboard</h3>
                    <p className="text-gray-600">Complete overview of your song catalog and performance data</p>
                  </div>

              {/* Key Metrics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border border-gray-200">
                  <div className="text-2xl font-bold text-purple-700">
                    {fullSongsData?.songs?.length || 0}
                  </div>
                  <div className="text-sm text-purple-600 font-medium">Total Songs</div>
                </div>
                <div className="bg-gradient-to-br from-pink-50 to-pink-100 p-4 rounded-lg border border-pink-200">
                  <div className="text-2xl font-bold text-pink-700">
                    {fullSongsData?.songs?.filter((song: any) => song.isLive).length || 0}
                  </div>
                  <div className="text-sm text-pink-600 font-medium">Live Songs</div>
                </div>
                <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-4 rounded-lg border border-gray-200">
                  <div className="text-2xl font-bold text-gray-700">
                    {fullSongsData?.songs?.filter((song: any) => !song.isLive).length || 0}
                  </div>
                  <div className="text-sm text-gray-600 font-medium">Inactive Songs</div>
                </div>
                <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border border-gray-200">
                  <div className="text-2xl font-bold text-purple-700">
                    {Object.keys(fullSongsData?.genres || {}).length}
                  </div>
                  <div className="text-sm text-purple-600 font-medium">Total Genres</div>
                </div>
              </div>


              {/* Genre Breakdown Chart */}
              <div className="bg-white p-4 rounded-lg border border-gray-200 mb-6">
                <h3 className="text-lg font-bold text-black mb-4">📈 Songs Per Genre</h3>
                <div className="space-y-3">
                  {Object.entries(GENRE_TITLES).map(([genreKey, genreTitle]) => {
                    const songs = fullSongsData?.songs?.filter((song: any) => song.genre === genreKey) || [];
                    const totalSongs = fullSongsData?.songs?.length || 0;
                    const percentage = songs.length > 0 ? (songs.length / totalSongs) * 100 : 0;
                    const isActive = genreStatus[genreKey];
                    
                    // Internal genre titles mapping
                    const internalTitles: Record<string, string> = {
                      'pop': 'Pop',
                      'soul': 'Soul/R&B',
                      'rock': 'Rock',
                      'hiphop': 'Hip-Hop',
                      'disco': 'Disco',
                      'instantmosh': 'Pop Punk',
                      'country': 'Country',
                      'latin': 'Latin',
                      'slowjams': 'Ballads',
                      'reggae': 'Reggae'
                    };
                    
                    return (
                      <div key={genreKey} className="flex items-center gap-3">
                        <div className="w-32 text-sm font-medium text-gray-700">
                          {internalTitles[genreKey] || genreKey}
                        </div>
                        <div className="flex-1 bg-gray-200 rounded-full h-4 relative">
                          <div 
                            className={`h-4 rounded-full transition-all duration-300 ${
                              isActive ? 'bg-gradient-to-r from-blue-500 to-purple-500' : 'bg-gray-400'
                            }`}
                            style={{ width: `${percentage}%` }}
                          ></div>
                        </div>
                        <div className="w-12 text-sm font-bold text-gray-700 text-right">
                          {songs.length}
                        </div>
                        <div className="w-16 text-xs text-gray-500 text-right">
                          {percentage.toFixed(1)}%
        </div>
      </div>
    );
                  })}
                </div>
              </div>

                </>
          )}

          {databaseTab === 'database' && (
            <>
              {/* Search and Filter Controls */}
              <div className="mb-4">
                {/* Search Input */}
                <div className="mb-4">
                  <input
                    type="text"
                    value={songSearch}
                    onChange={(e) => setSongSearch(e.target.value)}
                    placeholder="Search songs by title or artist..."
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                {/* Filter and Sort Controls */}
                <div className="flex justify-between items-center">
                  <div className="flex gap-2">
                    <button
                      onClick={() => setSongFilter('all')}
                      className={`px-4 py-2 rounded-lg font-medium transition-all ${
                        songFilter === 'all' 
                          ? 'bg-purple-800 text-white' 
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      All Songs
                    </button>
                    <button
                      onClick={() => setSongFilter('live')}
                      className={`px-4 py-2 rounded-lg font-medium transition-all ${
                        songFilter === 'live' 
                          ? 'bg-purple-600 text-white' 
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      Live Only
                    </button>
                    <button
                      onClick={() => setSongFilter('inactive')}
                      className={`px-4 py-2 rounded-lg font-medium transition-all ${
                        songFilter === 'inactive' 
                          ? 'bg-gray-600 text-white' 
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      Inactive Only
                    </button>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="flex gap-2">
                      <button
                        onClick={() => setSongSort('title')}
                        className={`px-3 py-2 rounded-lg font-medium transition-all text-sm ${
                          songSort === 'title' 
                            ? 'bg-purple-600 text-white' 
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        Sort by Title
                      </button>
                      <button
                        onClick={() => setSongSort('artist')}
                        className={`px-3 py-2 rounded-lg font-medium transition-all text-sm ${
                          songSort === 'artist' 
                            ? 'bg-purple-600 text-white' 
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        Sort by Artist
                      </button>
                    </div>
                    <div className="text-sm text-gray-600">
                      Showing {fullSongsData?.songs?.filter((song: any) => {
                        // Apply search filter
                        const searchTerm = songSearch.toLowerCase();
                        const matchesSearch = !searchTerm || 
                          (song.thcTitle || song.originalTitle || '').toLowerCase().includes(searchTerm) ||
                          (song.thcArtist || song.originalArtist || '').toLowerCase().includes(searchTerm);
                        
                        // Apply status filter
                        if (songFilter === 'live') return song.isLive && matchesSearch;
                        if (songFilter === 'inactive') return !song.isLive && matchesSearch;
                        return matchesSearch;
                      }).length || 0} songs
                    </div>
                  </div>
                </div>
              </div>


              {/* Songs Table */}
              <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full text-sm">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="px-3 py-2 text-left font-medium text-gray-700 w-12">#</th>
                        <th className="px-3 py-2 text-left font-medium text-gray-700">Song Title</th>
                        <th className="px-3 py-2 text-left font-medium text-gray-700">Artist</th>
                        <th className="px-3 py-2 text-left font-medium text-gray-700 w-20">Status</th>
                        <th className="px-3 py-2 text-left font-medium text-gray-700 w-20">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {fullSongsData?.songs?.filter((song: any) => {
                        // Apply search filter
                        const searchTerm = songSearch.toLowerCase();
                        const matchesSearch = !searchTerm || 
                          (song.thcTitle || song.originalTitle || '').toLowerCase().includes(searchTerm) ||
                          (song.thcArtist || song.originalArtist || '').toLowerCase().includes(searchTerm);
                        
                        // Apply status filter
                        if (songFilter === 'live') return song.isLive && matchesSearch;
                        if (songFilter === 'inactive') return !song.isLive && matchesSearch;
                        return matchesSearch; // 'all' with search
                      }).sort((a: any, b: any) => {
                        if (songSort === 'artist') {
                          const artistA = (a.thcArtist || a.originalArtist || '').toLowerCase();
                          const artistB = (b.thcArtist || b.originalArtist || '').toLowerCase();
                          return artistA.localeCompare(artistB);
                        } else {
                          const titleA = (a.thcTitle || a.originalTitle || '').toLowerCase();
                          const titleB = (b.thcTitle || b.originalTitle || '').toLowerCase();
                          return titleA.localeCompare(titleB);
                        }
                      }).map((song: any, index: number) => {
                        const songKey = `song-${song.id}`;
                        const preference = preferences[songKey];
                        
                        return (
                          <tr 
                            key={index} 
                            className="border-b border-gray-100 hover:bg-gray-50"
                          >
                            <td className="px-3 py-2 text-gray-500 text-xs">{index + 1}</td>
                            <td className="px-3 py-2 font-medium text-gray-900">{song.thcTitle || song.originalTitle}</td>
                            <td className="px-3 py-2 text-gray-600">{song.thcArtist || song.originalArtist}</td>
                            <td className="px-3 py-2">
                              {song.isLive ? (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                  Live
                                </span>
                              ) : (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                  Inactive
                                </span>
                              )}
                            </td>
                            <td className="px-3 py-2">
                              <button
                                onClick={() => {
                                  setEditingSong(song);
                                  setShowEditModal(true);
                                }}
                                className="px-2 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700 transition-colors"
                              >
                                Edit
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            </>
          )}

              {/* Edit Song Modal */}
              {showEditModal && editingSong && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                  <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="text-2xl font-bold text-black">Edit Song Properties</h3>
                      <button
                        onClick={() => setShowEditModal(false)}
                        className="text-gray-500 hover:text-gray-700 text-2xl"
                      >
                        ×
                      </button>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* Basic Info */}
                      <div className="space-y-4">
                        <h4 className="text-lg font-bold text-black mb-4">Basic Information</h4>
                        
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Original Title</label>
                          <input
                            type="text"
                            value={editingSong.originalTitle || ''}
                            onChange={(e) => setEditingSong({...editingSong, originalTitle: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Original Artist</label>
                          <input
                            type="text"
                            value={editingSong.originalArtist || ''}
                            onChange={(e) => setEditingSong({...editingSong, originalArtist: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">THC Title</label>
                          <input
                            type="text"
                            value={editingSong.thcTitle || ''}
                            onChange={(e) => setEditingSong({...editingSong, thcTitle: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">THC Artist</label>
                          <input
                            type="text"
                            value={editingSong.thcArtist || ''}
                            onChange={(e) => setEditingSong({...editingSong, thcArtist: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Video URL</label>
                          <input
                            type="text"
                            value={editingSong.videoUrl || ''}
                            onChange={(e) => setEditingSong({...editingSong, videoUrl: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Genre</label>
                          <select
                            value={editingSong.genre || 'pop'}
                            onChange={(e) => setEditingSong({...editingSong, genre: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          >
                            {Object.entries(GENRE_TITLES).map(([key, title]) => (
                              <option key={key} value={key}>{title}</option>
                            ))}
                            <option value="new">+ Add New Genre</option>
                          </select>
                        </div>
                      </div>

                      {/* Technical Details */}
                      <div className="space-y-4">
                        <h4 className="text-lg font-bold text-black mb-4">Technical Details</h4>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Original BPM</label>
                            <input
                              type="number"
                              value={editingSong.originalBpm || ''}
                              onChange={(e) => setEditingSong({...editingSong, originalBpm: parseInt(e.target.value) || null})}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">THC BPM</label>
                            <input
                              type="number"
                              value={editingSong.thcBpm || ''}
                              onChange={(e) => setEditingSong({...editingSong, thcBpm: parseInt(e.target.value) || null})}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Original Key</label>
                            <input
                              type="text"
                              value={editingSong.originalKey || ''}
                              onChange={(e) => setEditingSong({...editingSong, originalKey: e.target.value})}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">THC Key</label>
                            <input
                              type="text"
                              value={editingSong.thcKey || ''}
                              onChange={(e) => setEditingSong({...editingSong, thcKey: e.target.value})}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Standard Vocalist</label>
                          <input
                            type="text"
                            value={editingSong.standardVocalist || ''}
                            onChange={(e) => setEditingSong({...editingSong, standardVocalist: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-bold text-black mb-2">THC Percentage</label>
                          <input
                            type="text"
                            value={editingSong.thcPercentage || ''}
                            onChange={(e) => setEditingSong({...editingSong, thcPercentage: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>
                      </div>

                      {/* Performance Settings */}
                      <div className="space-y-4">
                        <h4 className="text-lg font-bold text-black mb-4">Performance Settings</h4>
                        
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Song Notes</label>
                          <textarea
                            value={editingSong.songNotes || ''}
                            onChange={(e) => setEditingSong({...editingSong, songNotes: e.target.value})}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            rows={3}
                          />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.isLive || false}
                              onChange={(e) => setEditingSong({...editingSong, isLive: e.target.checked})}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Is Live</label>
                          </div>
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.guestEntrance || false}
                              onChange={(e) => setEditingSong({...editingSong, guestEntrance: e.target.checked})}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Guest Entrance</label>
                          </div>
                        </div>

                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            checked={editingSong.dinnerEntertainment || false}
                            onChange={(e) => setEditingSong({...editingSong, dinnerEntertainment: e.target.checked})}
                            className="mr-2"
                          />
                          <label className="text-sm font-bold text-black">Dinner Entertainment</label>
                        </div>
                      </div>

                      {/* Sheet Music */}
                      <div className="space-y-4">
                        <h4 className="text-lg font-bold text-black mb-4">Sheet Music</h4>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.sheetMusic?.chartLyrics || false}
                              onChange={(e) => setEditingSong({
                                ...editingSong, 
                                sheetMusic: {...editingSong.sheetMusic, chartLyrics: e.target.checked}
                              })}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Chart Lyrics</label>
                          </div>
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.sheetMusic?.leadSheet || false}
                              onChange={(e) => setEditingSong({
                                ...editingSong, 
                                sheetMusic: {...editingSong.sheetMusic, leadSheet: e.target.checked}
                              })}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Lead Sheet</label>
                          </div>
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.sheetMusic?.fullBandArrangement || false}
                              onChange={(e) => setEditingSong({
                                ...editingSong, 
                                sheetMusic: {...editingSong.sheetMusic, fullBandArrangement: e.target.checked}
                              })}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Full Band Arrangement</label>
                          </div>
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              checked={editingSong.sheetMusic?.hornChart || false}
                              onChange={(e) => setEditingSong({
                                ...editingSong, 
                                sheetMusic: {...editingSong.sheetMusic, hornChart: e.target.checked}
                              })}
                              className="mr-2"
                            />
                            <label className="text-sm font-bold text-black">Horn Chart</label>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-end gap-4 mt-6">
                      <button
                        onClick={() => setShowEditModal(false)}
                        className="px-6 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 font-semibold"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={() => {
                          // Here you would save the changes to the database
                          console.log('Saving song:', editingSong);
                          setShowEditModal(false);
                        }}
                        className="px-6 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 font-semibold"
                      >
                        Save Changes
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}

          {bandPrepTab === 'genres' && songsData && (
            <>
              <div className="mb-6">
                <h2 className="text-2xl font-bold text-black mb-2">🎛️ Genre Management</h2>
                <p className="text-gray-600">Control which genres are available for client selection in the reception tab</p>
              </div>

              {/* Genre Status Overview */}
              <div className="bg-white p-4 rounded-lg border border-gray-200 mb-6">
                <h3 className="text-lg font-bold text-black mb-4">📊 Genre Status</h3>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Active Genres</span>
                  <div className="flex items-center gap-2">
                    <div className="w-16 bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-white0 h-2 rounded-full" 
                        style={{ width: `${(Object.keys(genreStatus).filter(genre => genreStatus[genre]).length / Object.keys(genreStatus).length) * 100}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-bold text-purple-600">
                      {Object.keys(genreStatus).filter(genre => genreStatus[genre]).length}
                    </span>
                  </div>
                </div>
              </div>

              {/* Genre Toggle List */}
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="p-4 border-b border-gray-200">
                  <h3 className="text-lg font-bold text-black">🎵 Manage Genre Availability</h3>
                  <p className="text-sm text-gray-600 mt-1">Toggle genres on/off to control what clients can see in the reception tab</p>
                </div>
                
                <div className="divide-y divide-gray-100">
                  {fullSongsData && Object.entries(fullSongsData.genres).map(([genreKey, genre]: [string, any]) => {
                    const isActive = genreStatus[genreKey];
                    const songCount = fullSongsData.songs.filter((song: any) => song.genre === genreKey).length;
                    
                    return (
                      <div key={genre} className="p-4 hover:bg-gray-50 transition-colors">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-4">
                            <div className="flex items-center gap-3">
                              <div className={`w-4 h-4 rounded-full border-2 ${
                                isActive 
                                  ? 'bg-white0 border-gray-500' 
                                  : 'bg-white border-gray-300'
                              }`}>
                                {isActive && (
                                  <div className="w-2 h-2 bg-white rounded-full mx-auto mt-0.5"></div>
                                )}
                              </div>
                              <div>
                                <div className="font-semibold text-gray-900">
                                  {genre.title}
                                </div>
                                <div className="text-sm text-gray-500">
                                  {songCount} song{songCount !== 1 ? 's' : ''}
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-3">
                            <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                              isActive 
                                ? 'bg-purple-100 text-green-800' 
                                : 'bg-gray-100 text-gray-600'
                            }`}>
                              {isActive ? 'Active' : 'Inactive'}
                            </div>
                            
                            <button
                              onClick={() => {
                                setGenreStatus(prev => ({
                                  ...prev,
                                  [genreKey]: !prev[genreKey]
                                }));
                              }}
                              className={`px-4 py-2 rounded-lg font-medium transition-all ${
                                isActive
                                  ? 'bg-red-100 text-red-700 hover:bg-red-200'
                                  : 'bg-purple-100 text-purple-700 hover:bg-purple-200'
                              }`}
                            >
                              {isActive ? 'Deactivate' : 'Activate'}
                            </button>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-5xl mx-auto">
      <div className="text-center mb-8 pb-6 border-b-4 border-gray-900">
        <div className="flex justify-center mb-4">
          <Image 
            src="/hook-club-logo.png" 
            alt="The Hook Club" 
            width={300} 
            height={120}
            priority
          />
        </div>
        <p className="text-xl font-light tracking-wide text-gray-800">THE HOOK CLUB</p>
        <p className="text-sm font-medium tracking-widest text-gray-500 uppercase mt-1">Planning Portal</p>
        <p className="text-gray-600 mt-4 font-light">Aretha Franklin & Ted White • Wedding</p>
        <p className="text-gray-600 font-medium">Saturday 4/20/1961 • The Plaza Hotel, New York</p>
        
        {/* Music Planning Deadline */}
        <div className="mt-4 flex justify-center">
          <div className="p-3 bg-gray-100 rounded-lg border border-gray-300 inline-block min-w-[400px]">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-sm font-semibold text-gray-700">Music Planning Deadline:</span>
                <span className="text-sm text-gray-600">February 20, 1961</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                  Overdue!
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* General Info Section */}
      <div className="mb-6">
        <h3 className="text-lg font-bold text-gray-800 mb-3">General Info</h3>
        <div className="bg-gray-200 p-2 rounded-lg">
          <div className="flex gap-2">
            <button
              onClick={() => setMainTab('general')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'general' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Services
            </button>
            <button
              onClick={() => setMainTab('gettingtoknow')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'gettingtoknow' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Getting To Know You
            </button>
            <button
              onClick={() => setMainTab('contacts')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'contacts' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Contacts
            </button>
            <button
              onClick={() => setMainTab('eventinfo')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'eventinfo' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Event Info
            </button>
          </div>
        </div>
      </div>

      {/* Music Planning Section */}
      <div className="mb-6">
        <h3 className="text-lg font-bold text-gray-800 mb-3">Music Planning</h3>
        <div className="bg-gray-200 p-2 rounded-lg">
          <div className="flex gap-2">
            <button
              onClick={() => setMainTab('welcome')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'welcome' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Welcome Party
            </button>
            <button
              onClick={() => setMainTab('ceremony')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'ceremony' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Ceremony
            </button>
            <button
              onClick={() => setMainTab('cocktail')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'cocktail' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Cocktail Hour
            </button>
            <button
              onClick={() => setMainTab('reception')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'reception' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              Reception
            </button>
            <button
              onClick={() => setMainTab('afterparty')}
              className={`flex-1 px-1 py-2 text-base font-semibold rounded transition-all ${
                mainTab === 'afterparty' 
                  ? 'bg-white text-black' 
                  : 'bg-transparent text-gray-700 hover:bg-white'
              }`}
            >
              After-Party
            </button>
          </div>
        </div>
      </div>



      {mainTab === 'general' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-4 sm:p-8">
          <div className="border-l-4 border-purple-600 pl-3 sm:pl-4 mb-4 sm:mb-6">
            <h2 className="text-2xl sm:text-3xl font-bold text-black">General Info</h2>
          </div>


          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h3 className="text-xl font-bold text-black mb-4">Your Services</h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-4 rounded border-2 border-gray-200">
                <h4 className="text-lg font-bold text-black mb-4">Entertainment Services</h4>
            <div className="space-y-4">
                  <div>
                <label className="block text-sm font-bold text-black mb-2">Welcome Party</label>
                <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                  <div className="font-semibold text-gray-800 mb-2">Folk Band</div>
                  <div className="text-sm text-gray-600">
                    <div>Violin • Guitar • Bass • Drums</div>
                  </div>
                </div>
              </div>
                  <div>
                <label className="block text-sm font-bold text-black mb-2">Ceremony</label>
                <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                  <div className="font-semibold text-gray-800 mb-2">Piano Trio</div>
                  <div className="text-sm text-gray-600">
                    <div>Violin • Cello • Piano</div>
                  </div>
                </div>
              </div>
                  <div>
                <label className="block text-sm font-bold text-black mb-2">Cocktail Hour</label>
                <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                  <div className="font-semibold text-gray-800 mb-2">Jazz Quartet</div>
                  <div className="text-sm text-gray-600">
                    <div>Saxophone • Guitar • Bass • Drums</div>
                  </div>
                </div>
              </div>
                  <div>
                <label className="block text-sm font-bold text-black mb-2">Reception</label>
                <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                  <div className="font-semibold text-gray-800 mb-2">15-Piece Full Band</div>
                  <div className="text-sm text-gray-600">
                    <div>5 Vocalists • Violin • Trumpet • Saxophone • Trombone</div>
                    <div>• Guitar • Keyboard • Synths • Bass • Percussion • Drums</div>
                  </div>
                </div>
              </div>
                  <div>
                <label className="block text-sm font-bold text-black mb-2">After-Party</label>
                <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                  <div className="font-semibold text-gray-800 mb-2">DJ + Sax + Violin</div>
                  <div className="text-sm text-gray-600">
                    <div>DJ • Saxophone • Violin</div>
                  </div>
                </div>
              </div>
                </div>
              </div>

              <div className="bg-white p-4 rounded border-2 border-gray-200">
                <h4 className="text-lg font-bold text-black mb-4">Production Services</h4>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-bold text-black mb-2">Welcome Party</label>
                    <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                      <div className="text-sm text-gray-600">
                        <div>Musician Amplification • Toast Mic</div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-bold text-black mb-2">Ceremony</label>
                    <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                      <div className="text-sm text-gray-600">
                        <div>Wireless Mic/Speakers</div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-bold text-black mb-2">Cocktail Hour</label>
                    <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                      <div className="text-sm text-gray-600">
                        <div>Musician Amplification</div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-bold text-black mb-2">Reception</label>
                    <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                      <div className="text-sm text-gray-600">
                        <div>PA System • Sound Engineer • Toast Mic • Wash Lighting</div>
                        <div>• Dance Lighting Package</div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-bold text-black mb-2">After-Party</label>
                    <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
                      <div className="text-sm text-gray-600">
                        <div>DJ Booth • PA System • Announcement Mic • 10 Uplights</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </div>
      )}

      {mainTab === 'gettingtoknow' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Getting to Know You</h2>
            <p className="text-gray-600 mt-2">Tell us about yourselves and your vision</p>
          </div>

          <div className="p-5 bg-white rounded-lg border-2 border-gray-200">
            <div className="space-y-4">
              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">How Did You Find The Hook Club Originally?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">Where Do You Live?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">Where Are You From Originally?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">How Did You Meet?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">When Did You Get Engaged?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">What Are Your Professions?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">How Would You Describe Your Guests?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>

              <div className="bg-white p-4 rounded">
                <label className="block text-sm font-bold text-black mb-2">What Is Your Vision For The Music?</label>
                <input 
                  type="text"
                  className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                />
              </div>
            </div>
          </div>
        </div>
      )}

      {mainTab === 'eventinfo' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Event Info</h2>
            <p className="text-gray-600 mt-2">Tell us about your wedding day details</p>
          </div>

          <div className="space-y-6">
            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">What Is Your Approximate Guest Count?</label>
              <input 
                type="number"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">Guest Arrival Time (formatted as 24 hour day like 23:00)</label>
              <input 
                type="text"
                placeholder="e.g., 18:00"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">What Is The Guest Attire?</label>
              <input 
                type="text"
                value={eventInfo.guestAttire}
                onChange={(e) => setEventInfo(prev => ({...prev, guestAttire: e.target.value}))}
                placeholder="e.g., Black tie, Cocktail attire, Casual"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">How Should THC Dress?</label>
              <input 
                type="text"
                value={eventInfo.thcDress}
                onChange={(e) => setEventInfo(prev => ({...prev, thcDress: e.target.value}))}
                placeholder="See wardrobe options below"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
                readOnly
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">Where Do We Eat Our Vendor Meal?</label>
              <input 
                type="text"
                value={eventInfo.vendorMealLocation}
                onChange={(e) => setEventInfo(prev => ({...prev, vendorMealLocation: e.target.value}))}
                placeholder="e.g., Separate room, Same as guests, Off-site"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">How Will Vendor Meals Be Served? Plated, Buffet etc</label>
              <input 
                type="text"
                value={eventInfo.vendorMealService}
                onChange={(e) => setEventInfo(prev => ({...prev, vendorMealService: e.target.value}))}
                placeholder="e.g., Plated, Buffet, Boxed meals"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
              />
            </div>

            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">What Is The Rain Plan For The Wedding?</label>
              <input 
                type="text"
                value={eventInfo.rainPlan}
                onChange={(e) => setEventInfo(prev => ({...prev, rainPlan: e.target.value}))}
                placeholder="e.g., Indoor ceremony, Tent, Postpone"
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900 placeholder:text-gray-500"
              />
            </div>
          </div>

          {/* Band Wardrobe Section */}
          <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border-2 border-gray-200">
            <h3 className="text-2xl font-bold text-black mb-6 text-center">🎭 THC Band Wardrobe Options</h3>
            <p className="text-gray-600 text-center mb-6">Select your preferred option and click to view photo/video examples</p>
            
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 hover:border-purple-400 transition-all">
                <div className="flex items-start gap-3 mb-4">
                  <input 
                    type="radio" 
                    name="wardrobe" 
                    value="stylish-cocktail"
                    className="w-5 h-5 text-purple-600 mt-1"
                  />
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-black mb-2">Stylish Cocktail Attire</h4>
                    <div className="text-sm text-gray-600 mb-4">
                      <p><strong>Masculine:</strong> Seasonal colors, individual styles</p>
                      <p><strong>Femme:</strong> Seasonal colors, individual styles</p>
                    </div>
                  </div>
                </div>
                <div className="flex justify-center">
                  <a 
                    href="#" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-block px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-all"
                  >
                    📸 View Examples
                  </a>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 hover:border-purple-400 transition-all">
                <div className="flex items-start gap-3 mb-4">
                  <input 
                    type="radio" 
                    name="wardrobe" 
                    value="stylish-black-tie"
                    className="w-5 h-5 text-purple-600 mt-1"
                  />
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-black mb-2">Stylish Black Tie</h4>
                    <div className="text-sm text-gray-600 mb-4">
                      <p><strong>Masculine:</strong> Black suits, skinny black ties</p>
                      <p><strong>Femme:</strong> Black dresses, elegant styling</p>
                    </div>
                  </div>
                </div>
                <div className="flex justify-center">
                  <a 
                    href="#" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-block px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-all"
                  >
                    📸 View Examples
                  </a>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 hover:border-purple-400 transition-all">
                <div className="flex items-start gap-3 mb-4">
                  <input 
                    type="radio" 
                    name="wardrobe" 
                    value="formal-black-tie"
                    className="w-5 h-5 text-purple-600 mt-1"
                  />
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-black mb-2">Formal Black Tie</h4>
                    <div className="text-sm text-gray-600 mb-4">
                      <p><strong>Masculine:</strong> White & black tux jackets, black bowties</p>
                      <p><strong>Femme:</strong> Silver sparkly dresses, elegant styling</p>
                    </div>
                  </div>
                </div>
                <div className="flex justify-center">
                  <a 
                    href="#" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-block px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-all"
                  >
                    📸 View Examples
                  </a>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 hover:border-purple-400 transition-all">
                <div className="flex items-start gap-3 mb-4">
                  <input 
                    type="radio" 
                    name="wardrobe" 
                    value="thc-formal"
                    className="w-5 h-5 text-purple-600 mt-1"
                  />
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-black mb-2">THC Formal</h4>
                    <div className="text-sm text-gray-600 mb-4">
                      <p><strong>Masculine:</strong> Purple tux jackets, purple bowties</p>
                      <p><strong>Femme:</strong> Purple sparkly dresses, elegant styling</p>
                    </div>
                  </div>
                </div>
                <div className="flex justify-center">
                  <a 
                    href="#" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="inline-block px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-all"
                  >
                    📸 View Examples
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {mainTab === 'contacts' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Contacts</h2>
            <p className="text-gray-600 mt-2">Share your contact information with us</p>
          </div>

          {/* Couple Section */}
          <div className="mb-8">
            <h3 className="text-2xl font-bold text-black mb-6">💍 Couple</h3>
            <div className="p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Partner 1 */}
                <div className="bg-white p-6 rounded-lg border-2 border-gray-300">
                  <h4 className="text-xl font-bold text-black mb-4 text-center">Partner 1</h4>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Name</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Pronouns</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Email</label>
                      <input type="email" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Phone</label>
                      <input type="tel" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Instagram</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                  </div>
                </div>

                {/* Partner 2 */}
                <div className="bg-white p-6 rounded-lg border-2 border-gray-300">
                  <h4 className="text-xl font-bold text-black mb-4 text-center">Partner 2</h4>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Name</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Pronouns</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Email</label>
                      <input type="email" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Phone</label>
                      <input type="tel" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Instagram</label>
                      <input type="text" className="w-full p-2 border-2 border-gray-300 rounded text-gray-900" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Vendors Section */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-2xl font-bold text-black">🏢 Vendors</h3>
              <button
                onClick={addVendor}
                className="px-4 py-2 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-all"
              >
                + Add Vendor
              </button>
            </div>

            <div className="space-y-4">
              {vendors.map((vendor) => (
                <div key={vendor.id} className="bg-white p-4 rounded-lg border-2 border-gray-300">
                  <div className="flex justify-between items-start mb-4">
                    <h4 className="text-lg font-bold text-black">Vendor Contact</h4>
                    <button
                      onClick={() => removeVendor(vendor.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Vendor Type</label>
                      <select
                        value={vendor.type}
                        onChange={(e) => updateVendor(vendor.id, 'type', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      >
                        <option value="">Select type...</option>
                        <optgroup label="🏛️ Venue & Planning">
                          <option value="venue">🏛️ Venue</option>
                          <option value="month-coordinator">📅 Month-of Coordinator</option>
                          <option value="day-coordinator">📋 Day-of Coordinator</option>
                          <option value="venue-coordinator">🏆 Venue Event Coordinator</option>
                        </optgroup>
                        <optgroup label="🍽️ Food & Beverage">
                          <option value="caterer">🥗 Caterer</option>
                          <option value="cake">🎂 Cake</option>
                        </optgroup>
                        <optgroup label="📸 Photography & Video">
                          <option value="photographer">📸 Photographer</option>
                          <option value="videographer">📹 Videographer</option>
                          <option value="photobooth">🖼️ Photo Booth</option>
                        </optgroup>
                        <optgroup label="🌸 Decor & Styling">
                          <option value="florist">🌸 Florist</option>
                          <option value="rentals">🛎️ Rentals</option>
                        </optgroup>
                        <optgroup label="💄 Beauty & Attire">
                          <option value="hairmakeup">💇‍♀️ Hair & Makeup</option>
                        </optgroup>
                        <optgroup label="🎵 Entertainment">
                          <option value="ceremony-musician">🎼 Ceremony Musician</option>
                          <option value="cocktail-musician">🍸 Cocktail Hour Musician</option>
                          <option value="specialty-performer">🎪 Specialty Performer</option>
                          <option value="afterparty-dj">🎧 After-Party DJ</option>
                        </optgroup>
                        <optgroup label="📜 Ceremony">
                          <option value="officiant">🙇 Officiant</option>
                        </optgroup>
                        <optgroup label="Other">
                          <option value="other">Other</option>
                        </optgroup>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Name</label>
                      <input
                        type="text"
                        value={vendor.name}
                        onChange={(e) => updateVendor(vendor.id, 'name', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Email</label>
                      <input
                        type="email"
                        value={vendor.email}
                        onChange={(e) => updateVendor(vendor.id, 'email', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Instagram</label>
                      <input
                        type="text"
                        value={vendor.instagram}
                        onChange={(e) => updateVendor(vendor.id, 'instagram', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                  </div>
                </div>
              ))}

              {vendors.length === 0 && (
                <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-lg">
                  <p className="text-gray-600 text-lg mb-2">No vendors added yet</p>
                  <p className="text-gray-500 text-sm">Click &quot;Add Vendor&quot; to get started</p>
                </div>
              )}
            </div>
          </div>

          {/* Vendor Recommendations */}
          <div className="mt-8 p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200">
            <div className="text-center">
              <h3 className="text-xl font-bold text-black mb-3">Looking for vendors?</h3>
              <p className="text-gray-600 mb-4">Check out our curated recommendations for trusted wedding professionals</p>
              <button
                onClick={() => setMainTab('vendor-recommendations')}
                className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-all shadow-lg hover:shadow-xl"
              >
                View Vendor Recommendations
              </button>
            </div>
          </div>

        </div>
      )}

      {mainTab === 'ceremony' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Ceremony</h2>
            <p className="text-gray-600 mt-2">Solo Piano</p>
          </div>

          {/* Ceremony Sub-tabs */}
          <div className="mb-6 flex gap-4">
            <div className="flex-1 bg-gray-200 p-2 rounded-lg">
              <div className="flex gap-2">
                <button
                  onClick={() => setCeremonyTab('guest-arrival')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    ceremonyTab === 'guest-arrival' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Guest Arrival
                </button>
                <button
                  onClick={() => setCeremonyTab('ceremony-music')}
                  className={`flex-1 px-4 py-2 font-semibold rounded transition-all ${
                    ceremonyTab === 'ceremony-music' 
                      ? 'bg-white text-black' 
                      : 'bg-transparent text-gray-700 hover:bg-white'
                  }`}
                >
                  Ceremony Music
                </button>
        </div>
            </div>
          </div>

          {/* Guest Arrival Section */}
          {ceremonyTab === 'guest-arrival' && (
            <div>
              
              {/* Guest Arrival Requests */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Guest Arrival Requests</h4>
                <p className="text-gray-600 mb-4">Add up to 2 specific song requests for guest arrival (optional). These can be any songs you want to hear, including songs not on our repertoire list.</p>
                
                <div className="space-y-4">
                  {guestArrivalRequests.map((request, index) => (
                    <div key={request.id} className="bg-white p-4 rounded border-2 border-gray-300">
                      <div className="flex justify-between items-start mb-4">
                        <h5 className="text-lg font-bold text-black">Guest Arrival Request {index + 1}</h5>
                        <button
                          onClick={() => removeGuestArrivalRequest(request.id)}
                          className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                        >
                          Remove
                        </button>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Song</label>
                          <input
                            type="text"
                            value={request.song}
                            onChange={(e) => updateGuestArrivalRequest(request.id, 'song', e.target.value)}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Artist</label>
                          <input
                            type="text"
                            value={request.artist}
                            onChange={(e) => updateGuestArrivalRequest(request.id, 'artist', e.target.value)}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Spotify/YouTube Link (optional)</label>
                          <input
                            type="url"
                            value={request.link}
                            onChange={(e) => updateGuestArrivalRequest(request.id, 'link', e.target.value)}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-bold text-black mb-2">Notes</label>
                          <input
                            type="text"
                            value={request.notes}
                            onChange={(e) => updateGuestArrivalRequest(request.id, 'notes', e.target.value)}
                            className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {guestArrivalRequests.length < 2 && (
                    <button
                      onClick={addGuestArrivalRequest}
                      className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                    >
                      + Add Guest Arrival Request
                    </button>
                  )}
                </div>
              </div>

              {/* Guest Arrival Playlists */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Additional Guest Arrival Requests</h4>
                <p className="text-gray-600 mb-4">Share playlists for additional songs you want to hear during guest arrival - these are in addition to your 2 dedicated song requests above</p>
                
                <div className="space-y-4">
                  {ceremonyPlaylists.map((playlist, index) => (
                    <div key={playlist.id} className="bg-white p-4 rounded border-2 border-gray-300">
                      <div className="flex justify-between items-start mb-4">
                        <h5 className="text-lg font-bold text-black">Additional Request Playlist {index + 1}</h5>
                        <button
                          onClick={() => removeCeremonyPlaylist(playlist.id)}
                          className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                        >
                          Remove
                        </button>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-bold text-black mb-2">Playlist Link</label>
                        <input
                          type="text"
                          value={playlist.link}
                          onChange={(e) => updateCeremonyPlaylist(playlist.id, 'link', e.target.value)}
                          className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          placeholder="Spotify/Apple Music/YouTube playlist link"
                        />
                      </div>
                    </div>
                  ))}
                </div>

                <button
                  onClick={addCeremonyPlaylist}
                  className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                >
                  + Add Additional Request Playlist
                </button>
              </div>

              {/* Repertoire List */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Guest Arrival Repertoire</h4>
                <p className="text-gray-600 mb-4">Browse our repertoire and let us know your preferences</p>
                
                {/* Ceremony Song Progress Tracker */}
                <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
                  <h3 className="text-lg font-bold text-black mb-4 text-center">🎵 Song Progress</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {/* Definitely Play Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-green-700">Definitely Play</span>
                        <span className="text-sm font-bold text-green-700">0/∞</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            0 >= 5 && 0 <= 10 
                              ? 'bg-green-500' 
                              : 0 < 5 
                              ? 'bg-green-500' 
                              : 'bg-red-500'
                          }`}
                          style={{ width: `${Math.min((0 / 10) * 100, 100)}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600">Goal: 5-10 songs</div>
                      {0 < 5 && (
                        <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                      )}
                      {0 > 10 && (
                        <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                      )}
                    </div>

                    {/* If Mood Is Right Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-yellow-700">If Mood Is Right</span>
                        <span className="text-sm font-bold text-yellow-700">0/∞</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            0 >= 5 
                              ? 'bg-yellow-500' 
                              : 'bg-yellow-500'
                          }`}
                          style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600">Goal: ≥5 songs</div>
                      {0 < 5 && (
                        <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                      )}
                    </div>

                    {/* Avoid Playing Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-red-700">Avoid Playing</span>
                        <span className="text-sm font-bold text-red-700">0/∞</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            0 <= 5 
                              ? 'bg-red-500' 
                              : 'bg-red-500'
                          }`}
                          style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600">Goal: ≤5 songs</div>
                      {0 > 5 && (
                        <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                      )}
                    </div>
                  </div>

                </div>

                <div className="space-y-4">
                  {songsData && Object.values(songsData).flatMap(songs => songs).sort((a: any, b: any) => {
                    const artistA = (a.thcArtist || a.originalArtist || '').toLowerCase();
                    const artistB = (b.thcArtist || b.originalArtist || '').toLowerCase();
                    return artistA.localeCompare(artistB);
                  }).slice(0, 20).map((song, index) => (
                    <SongRow 
                      key={index}
                      song={song.title}
                      artist={song.artist}
                      videoUrl={song.videoUrl || '#'}
                      prefKey={`ceremony-guest-arrival-${index}`}
                    />
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Ceremony Music Section */}
          {ceremonyTab === 'ceremony-music' && (
            <div>
              
              {/* Processional Songs */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Processional Songs</h4>
                <div className="space-y-4">
                  {processionalSongs.map((song, index) => (
                    <div key={index} className="bg-white p-4 rounded border-2 border-gray-300">
                      <div className="flex justify-between items-start mb-4">
                        <h5 className="text-lg font-bold text-black">Processional Song {index + 1}</h5>
                        <button
                          onClick={() => removeProcessionalSong(index)}
                          disabled={processionalSongs.length === 1}
                          className={`px-3 py-1 rounded text-sm ${
                            processionalSongs.length === 1 
                              ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                              : 'bg-red-100 text-red-700 hover:bg-red-200'
                          }`}
                        >
                          Remove
                        </button>
                      </div>
                      
                      <div className="space-y-4">
                        {/* Category and Walker Count */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-start">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Category</label>
                            <select
                              value={song.category}
                              onChange={(e) => updateProcessionalSong(index, 'category', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            >
                              <option value="">Select category</option>
                              <option value="wedding-party">Wedding Party</option>
                              <option value="bridesmaids">Bridesmaids</option>
                              <option value="groomsmen">Groomsmen</option>
                              <option value="bridal-processional">Bridal Processional</option>
                              <option value="family">Family</option>
                              <option value="flower-girl">Flower Girl</option>
                              <option value="ring-bearer">Ring Bearer</option>
                              <option value="other">Other</option>
                            </select>
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">
                              How Many Pairs or Individuals Will Walk Down To This Song?
                            </label>
                            <input
                              type="text"
                              value={song.walkerCount}
                              onChange={(e) => updateProcessionalSong(index, 'walkerCount', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                              placeholder="e.g., 2 pairs, 4 individuals"
                            />
                            <div className="text-xs text-gray-600 mt-1">
                              We will confirm actual names and precise order in the weeks before the wedding
                            </div>
                          </div>
                        </div>
                        
                        {/* Popular Selections */}
                        {song.category && SONG_SUGGESTIONS.processional[song.category as keyof typeof SONG_SUGGESTIONS.processional] && (
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Popular Selections</label>
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2">
                              {SONG_SUGGESTIONS.processional[song.category as keyof typeof SONG_SUGGESTIONS.processional].map((suggestion, suggestionIndex) => (
                                <button
                                  key={suggestionIndex}
                                  type="button"
                                  onClick={() => selectPopularProcessionalSong(index, suggestion)}
                                  className="p-2 text-left border-2 border-gray-300 rounded hover:border-gray-500 hover:bg-white transition-all text-sm"
                                >
                                  <div className="font-medium text-gray-900">{suggestion.song}</div>
                                  <div className="text-gray-600">{suggestion.artist}</div>
                                </button>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {/* Song Details */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Title</label>
                            <input
                              type="text"
                              value={song.title}
                              onChange={(e) => updateProcessionalSong(index, 'title', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Artist</label>
                            <input
                              type="text"
                              value={song.artist}
                              onChange={(e) => updateProcessionalSong(index, 'artist', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>
                        
                        {/* YouTube Link and Notes */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">YouTube Link</label>
                            <input
                              type="url"
                              value={song.youtubeLink}
                              onChange={(e) => updateProcessionalSong(index, 'youtubeLink', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Notes</label>
                            <input
                              type="text"
                              value={song.notes}
                              onChange={(e) => updateProcessionalSong(index, 'notes', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  <button
                    onClick={addProcessionalSong}
                    className="w-full px-4 py-2 bg-purple-600 text-white font-semibold rounded hover:bg-purple-700 transition-all"
                  >
                    + Add Processional Song
                  </button>
                </div>
              </div>

              {/* Recessional Song */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Recessional Song</h4>
                <div className="bg-white p-4 rounded border-2 border-gray-300">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Song Title</label>
                      <input
                        type="text"
                        value={recessionalSong.title}
                        onChange={(e) => setRecessionalSong({...recessionalSong, title: e.target.value})}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Artist</label>
                      <input
                        type="text"
                        value={recessionalSong.artist}
                        onChange={(e) => setRecessionalSong({...recessionalSong, artist: e.target.value})}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">YouTube Link</label>
                      <input
                        type="url"
                        value={recessionalSong.youtubeLink}
                        onChange={(e) => setRecessionalSong({...recessionalSong, youtubeLink: e.target.value})}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Performance Style</label>
                      <select
                        value={recessionalSong.performanceStyle}
                        onChange={(e) => setRecessionalSong({...recessionalSong, performanceStyle: e.target.value})}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      >
                        <option value="">Select style...</option>
                        <option value="live">Live Performance</option>
                        <option value="recorded">Recorded Track</option>
                      </select>
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-bold text-black mb-2">Notes</label>
                      <input
                        type="text"
                        value={recessionalSong.notes}
                        onChange={(e) => setRecessionalSong({...recessionalSong, notes: e.target.value})}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-bold text-black mb-2">Recessional music cue:</label>
                      <select className="w-full p-2 border-2 border-gray-300 rounded text-gray-900">
                        <option value="">Select cue...</option>
                        <option value="first-kiss">After first kiss</option>
                        <option value="pronouncement">After pronouncement</option>
                        <option value="rings">After ring exchange</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Ceremony Info Fields */}
              <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
                <h4 className="text-xl font-bold text-black mb-4">Ceremony Details</h4>
                <div className="space-y-4">
                  <div className="bg-white p-4 rounded border-2 border-gray-300">
                    <label className="block text-sm font-bold text-black mb-2">Who will be coordinating the ceremony?</label>
                    <input 
                      type="text"
                      className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                    />
                  </div>

                  <div className="bg-white p-4 rounded border-2 border-gray-300">
                    <label className="block text-sm font-bold text-black mb-2">Do you circle each other at the altar/chuppah?</label>
                    <select className="w-full p-2 border-2 border-gray-300 rounded text-gray-900">
                      <option value="">Select...</option>
                      <option value="yes">Yes</option>
                      <option value="no">No</option>
                    </select>
                  </div>

                  <div className="bg-white p-4 rounded border-2 border-gray-300">
                    <label className="block text-sm font-bold text-black mb-2">Any other religious moments or readings?</label>
                    <input 
                      type="text"
                      className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                    />
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {mainTab === 'cocktail' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Cocktail Hour</h2>
            <p className="text-gray-600 mt-2">Jazzy Duo (Sax + Guitar)</p>
          </div>

          {/* Cocktail Hour Song Requests */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Cocktail Hour Requests</h4>
            <p className="text-gray-600 mb-4">Add up to 2 specific song requests for cocktail hour (optional). These can be any songs you want to hear, including songs not on our repertoire list.</p>
            
            <div className="space-y-4">
              {cocktailRequests.map((request, index) => (
                <div key={request.id} className="bg-white p-4 rounded border-2 border-gray-300">
                  <div className="flex justify-between items-start mb-4">
                    <h5 className="text-lg font-bold text-black">Cocktail Hour Request {index + 1}</h5>
                    <button
                      onClick={() => removeCocktailRequest(request.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
        </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Song</label>
                      <input
                        type="text"
                        value={request.song}
                        onChange={(e) => updateCocktailRequest(request.id, 'song', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Artist</label>
                      <input
                        type="text"
                        value={request.artist}
                        onChange={(e) => updateCocktailRequest(request.id, 'artist', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Spotify/YouTube Link (optional)</label>
                      <input
                        type="url"
                        value={request.link}
                        onChange={(e) => updateCocktailRequest(request.id, 'link', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Notes</label>
                      <input
                        type="text"
                        value={request.notes}
                        onChange={(e) => updateCocktailRequest(request.id, 'notes', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              {cocktailRequests.length < 2 && (
                <button
                  onClick={addCocktailRequest}
                  className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                >
                  + Add Cocktail Hour Request
                </button>
              )}
            </div>
          </div>

          {/* Cocktail Hour Playlists */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Cocktail Hour Playlists</h4>
            <p className="text-gray-600 mb-4">Share playlists for us to reference during cocktail hour - we&apos;ll treat these as additional requests</p>
            
            <div className="space-y-4">
              {cocktailPlaylists.map((playlist, index) => (
                <div key={playlist.id} className="bg-white p-4 rounded border-2 border-orange-300">
                  <div className="flex justify-between items-start mb-4">
                    <h5 className="text-lg font-bold text-black">Playlist {index + 1}</h5>
                    <button
                      onClick={() => removeCocktailPlaylist(playlist.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Playlist Type</label>
                      <select
                        value={playlist.type}
                        onChange={(e) => updateCocktailPlaylist(playlist.id, 'type', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      >
                        <option value="">Select playlist type...</option>
                        <option value="jazz">Jazz & Lounge</option>
                        <option value="background">Background Music</option>
                        <option value="social">Social Music</option>
                        <option value="general">General Requests</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Playlist Link</label>
                      <input
                        type="text"
                        value={playlist.link}
                        onChange={(e) => updateCocktailPlaylist(playlist.id, 'link', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                        placeholder="Spotify/Apple Music/YouTube playlist link"
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <button
              onClick={addCocktailPlaylist}
              className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
            >
              + Add Cocktail Hour Playlist
            </button>
          </div>

          {/* Cocktail Hour Special Moments */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Cocktail Hour Special Moments</h4>
            <p className="text-gray-600 mb-4">Add special moments for cocktail hour (optional). This is rare, but useful if you want to be introduced into cocktail hour or do your first dance early.</p>
            
            <div className="space-y-4">
              {cocktailSpecialMoments.map((moment, index) => (
                <div key={moment.id} className="bg-white p-4 rounded border-2 border-gray-300">
                  <div className="flex justify-between items-start mb-4">
                    <h5 className="text-lg font-bold text-black">Special Moment {index + 1}</h5>
                    <button
                      onClick={() => removeCocktailSpecialMoment(moment.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Moment Type</label>
                      <select
                        value={moment.type}
                        onChange={(e) => updateCocktailSpecialMoment(moment.id, 'type', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      >
                        <option value="">Select moment type...</option>
                        <option value="introduction">Introduction</option>
                        <option value="first-dance">First Dance</option>
                        <option value="parent-dance">Parent Dance</option>
                        <option value="anniversary-dance">Anniversary Dance</option>
                        <option value="cake-cutting">Cake Cutting</option>
                        <option value="toast">Toast</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Song</label>
                      <input
                        type="text"
                        value={moment.song}
                        onChange={(e) => updateCocktailSpecialMoment(moment.id, 'song', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Artist</label>
                      <input
                        type="text"
                        value={moment.artist}
                        onChange={(e) => updateCocktailSpecialMoment(moment.id, 'artist', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Spotify/YouTube Link (optional)</label>
                      <input
                        type="url"
                        value={moment.link}
                        onChange={(e) => updateCocktailSpecialMoment(moment.id, 'link', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-bold text-black mb-2">Notes</label>
                      <input
                        type="text"
                        value={moment.notes}
                        onChange={(e) => updateCocktailSpecialMoment(moment.id, 'notes', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              <button
                onClick={addCocktailSpecialMoment}
                className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
              >
                + Add Cocktail Hour Special Moment
              </button>
            </div>
          </div>

          {/* Cocktail Hour Repertoire */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Cocktail Hour Repertoire</h4>
            <p className="text-gray-600 mb-4">Browse our repertoire and let us know your preferences</p>
            
            {/* Cocktail Hour Song Progress Tracker */}
            <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
              <h3 className="text-lg font-bold text-black mb-4 text-center">🎵 Song Progress</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Definitely Play Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-green-700">Definitely Play</span>
                    <span className="text-sm font-bold text-green-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 && 0 <= 10 
                          ? 'bg-green-500' 
                          : 0 < 5 
                          ? 'bg-green-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 10) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: 5-10 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                  {0 > 10 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>

                {/* If Mood Is Right Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-yellow-700">If Mood Is Right</span>
                    <span className="text-sm font-bold text-yellow-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 
                          ? 'bg-yellow-500' 
                          : 'bg-yellow-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≥5 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                </div>

                {/* Avoid Playing Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-red-700">Avoid Playing</span>
                    <span className="text-sm font-bold text-red-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 <= 5 
                          ? 'bg-red-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≤5 songs</div>
                  {0 > 5 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <SongRow 
                song="Sample Song 1"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="cocktail-sample-1"
              />
              <SongRow 
                song="Sample Song 2"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="cocktail-sample-2"
              />
              
              <p className="text-gray-500 text-center py-4 italic">Cocktail hour repertoire coming soon...</p>
            </div>
          </div>
        </div>
      )}

      {mainTab === 'afterparty' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">After-Party</h2>
            <p className="text-gray-600 mt-2">Keep the party going with our DJ + Sax + Violin ensemble!</p>
          </div>

          {/* After-Party Ensemble */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">After-Party Ensemble</h4>
            <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
              <div className="font-semibold text-gray-800 mb-2">DJ + Sax + Violin</div>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>• DJ</li>
                <li>• Saxophone</li>
                <li>• Violin</li>
              </ul>
            </div>
          </div>

          {/* After-Party Song Requests */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">After-Party Requests</h4>
            <p className="text-gray-600 mb-4">Add up to 5 specific song requests for the after-party (optional). These can be any songs you want to hear, including songs not on our repertoire list.</p>
            
            <div className="space-y-4">
              {afterpartyRequests.map((request, index) => (
                <div key={request.id} className="bg-white p-4 rounded border-2 border-gray-300">
                  <div className="flex justify-between items-start mb-4">
                    <h5 className="text-lg font-bold text-black">After-Party Request {index + 1}</h5>
                    <button
                      onClick={() => removeAfterpartyRequest(request.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
        </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Song</label>
                      <input
                        type="text"
                        value={request.song}
                        onChange={(e) => updateAfterpartyRequest(request.id, 'song', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Artist</label>
                      <input
                        type="text"
                        value={request.artist}
                        onChange={(e) => updateAfterpartyRequest(request.id, 'artist', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Spotify/YouTube Link (optional)</label>
                      <input
                        type="url"
                        value={request.link}
                        onChange={(e) => updateAfterpartyRequest(request.id, 'link', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Notes</label>
                      <input
                        type="text"
                        value={request.notes}
                        onChange={(e) => updateAfterpartyRequest(request.id, 'notes', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              {afterpartyRequests.length < 5 && (
                <button
                  onClick={addAfterpartyRequest}
                  className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                >
                  + Add After-Party Request
                </button>
              )}
            </div>
          </div>

          {/* After-Party Playlist */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">After-Party Playlist</h4>
            <p className="text-gray-600 mb-4">Share a Spotify or Apple Music playlist for the after-party (optional)</p>
            
            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">Playlist Link</label>
              <input
                type="url"
                value={afterpartyPlaylist}
                onChange={(e) => setAfterpartyPlaylist(e.target.value)}
                placeholder="https://open.spotify.com/playlist/..."
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
              />
              <p className="text-xs text-gray-500 mt-2">Paste your Spotify, Apple Music, or YouTube playlist link here</p>
            </div>
          </div>

          {/* After-Party Repertoire */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">After-Party Repertoire</h4>
            <p className="text-gray-600 mb-4">Browse our repertoire and let us know your preferences</p>
            
            {/* After-Party Song Progress Tracker */}
            <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
              <h3 className="text-lg font-bold text-black mb-4 text-center">🎵 Song Progress</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Definitely Play Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-green-700">Definitely Play</span>
                    <span className="text-sm font-bold text-green-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 && 0 <= 10 
                          ? 'bg-green-500' 
                          : 0 < 5 
                          ? 'bg-green-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 10) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: 5-10 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                  {0 > 10 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>

                {/* If Mood Is Right Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-yellow-700">If Mood Is Right</span>
                    <span className="text-sm font-bold text-yellow-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 
                          ? 'bg-yellow-500' 
                          : 'bg-yellow-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≥5 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                </div>

                {/* Avoid Playing Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-red-700">Avoid Playing</span>
                    <span className="text-sm font-bold text-red-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 <= 5 
                          ? 'bg-red-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≤5 songs</div>
                  {0 > 5 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <SongRow 
                song="Sample Song 1"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="afterparty-sample-1"
              />
              <SongRow 
                song="Sample Song 2"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="afterparty-sample-2"
              />
              
              <p className="text-gray-500 text-center py-4 italic">After-party repertoire coming soon...</p>
            </div>
          </div>

        </div>
      )}

      {mainTab === 'welcome' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Welcome Party</h2>
            <p className="text-gray-600 mt-2">Welcome your guests with our Folk Band!</p>
          </div>

          {/* Welcome Party Ensemble */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Welcome Party Ensemble</h4>
            <div className="p-3 border-2 border-gray-300 rounded bg-gray-50">
              <div className="font-semibold text-gray-800 mb-2">Folk Band</div>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>• Violin</li>
                <li>• Guitar</li>
                <li>• Bass</li>
                <li>• Drums</li>
              </ul>
            </div>
          </div>

          {/* Welcome Party Song Requests */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Welcome Party Requests</h4>
            <p className="text-gray-600 mb-4">Add up to 5 specific song requests for the welcome party (optional). These can be any songs you want to hear, including songs not on our repertoire list.</p>
            
            <div className="space-y-4">
              {welcomeRequests.map((request, index) => (
                <div key={request.id} className="bg-white p-4 rounded border-2 border-gray-300">
                  <div className="flex justify-between items-start mb-4">
                    <h5 className="text-lg font-bold text-black">Welcome Party Request {index + 1}</h5>
                    <button
                      onClick={() => removeWelcomeRequest(request.id)}
                      className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                    >
                      Remove
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Song Title</label>
                      <input
                        type="text"
                        value={request.song}
                        onChange={(e) => updateWelcomeRequest(request.id, 'song', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                        placeholder="Enter song title"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Artist</label>
                      <input
                        type="text"
                        value={request.artist}
                        onChange={(e) => updateWelcomeRequest(request.id, 'artist', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                        placeholder="Enter artist name"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">YouTube Link (Optional)</label>
                      <input
                        type="url"
                        value={request.link}
                        onChange={(e) => updateWelcomeRequest(request.id, 'link', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                        placeholder="https://youtube.com/watch?v=..."
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-bold text-black mb-2">Notes (Optional)</label>
                      <input
                        type="text"
                        value={request.notes}
                        onChange={(e) => updateWelcomeRequest(request.id, 'notes', e.target.value)}
                        className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                        placeholder="Any special notes about this song"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              {welcomeRequests.length < 5 && (
                <button
                  onClick={addWelcomeRequest}
                  className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                >
                  + Add Welcome Party Request
                </button>
              )}
            </div>
          </div>

          {/* Welcome Party Playlist */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Welcome Party Playlist</h4>
            <p className="text-gray-600 mb-4">Share a playlist for additional song inspiration</p>
            
            <div className="bg-white p-4 rounded border-2 border-gray-300">
              <label className="block text-sm font-bold text-black mb-2">Playlist Link</label>
              <input
                type="url"
                value={welcomePlaylist}
                onChange={(e) => setWelcomePlaylist(e.target.value)}
                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                placeholder="https://spotify.com/playlist/..."
              />
              <p className="text-xs text-gray-500 mt-2">Paste your Spotify, Apple Music, or YouTube playlist link here</p>
            </div>
          </div>

          {/* Welcome Party Repertoire */}
          <div className="mb-8 p-5 bg-white rounded-lg border-2 border-gray-200">
            <h4 className="text-xl font-bold text-black mb-4">Welcome Party Repertoire</h4>
            <p className="text-gray-600 mb-4">Browse our repertoire and let us know your preferences</p>
            
            {/* Welcome Party Song Progress Tracker */}
            <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
              <h3 className="text-lg font-bold text-black mb-4 text-center">🎵 Song Progress</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Definitely Play Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-green-700">Definitely Play</span>
                    <span className="text-sm font-bold text-green-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 && 0 <= 10 
                          ? 'bg-green-500' 
                          : 0 < 5 
                          ? 'bg-green-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 10) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: 5-10 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                  {0 > 10 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>

                {/* If Mood Is Right Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-yellow-700">If Mood Is Right</span>
                    <span className="text-sm font-bold text-yellow-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 >= 5 
                          ? 'bg-yellow-500' 
                          : 'bg-yellow-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≥5 songs</div>
                  {0 < 5 && (
                    <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                  )}
                </div>

                {/* Avoid Playing Progress */}
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-semibold text-red-700">Avoid Playing</span>
                    <span className="text-sm font-bold text-red-700">0/∞</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        0 <= 5 
                          ? 'bg-red-500' 
                          : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min((0 / 5) * 100, 100)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600">Goal: ≤5 songs</div>
                  {0 > 5 && (
                    <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                  )}
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <SongRow 
                song="Sample Song 1"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="welcome-sample-1"
              />
              <SongRow 
                song="Sample Song 2"
                artist="Sample Artist"
                videoUrl="#"
                prefKey="welcome-sample-2"
              />
            </div>
          </div>
        </div>
      )}

      {/* Music Summary section removed */}

          {/* Event Overview */}
          <div className="mb-8 p-4 bg-gray-50 rounded-lg border-2 border-gray-200">
            <h3 className="text-lg font-bold text-black mb-4 flex items-center">
              <span className="mr-2">📅</span>
              Event Overview
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
              <div className="bg-white p-3 rounded border border-gray-200">
                <p className="text-xs text-gray-600 mb-1">Couple</p>
                <p className="font-semibold text-black text-sm leading-tight">Aretha Franklin & Ted White</p>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <p className="text-xs text-gray-600 mb-1">Date</p>
                <p className="font-semibold text-black text-sm">Saturday 4/20/1961</p>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <p className="text-xs text-gray-600 mb-1">Venue</p>
                <p className="font-semibold text-black text-sm leading-tight">The Plaza Hotel, New York</p>
              </div>
              <div className="bg-white p-3 rounded border border-gray-200">
                <p className="text-xs text-gray-600 mb-1">Music Deadline</p>
                <p className="font-semibold text-black text-sm">February 20, 1961</p>
              </div>
            </div>
          </div>

          {/* Song Selection Progress */}
          <div className="mb-8 p-6 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border-2 border-gray-200">
            <h3 className="text-xl font-bold text-black mb-4 flex items-center">
              <span className="mr-2">🎵</span>
              Song Selection Progress
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 text-center">
                <div className="text-3xl font-bold text-purple-700 mb-2">{songCounts.definitely}</div>
                <div className="text-sm font-semibold text-gray-800">Definitely Play!</div>
                <div className="text-xs text-gray-700 mt-1">Priority songs</div>
              </div>
              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 text-center">
                <div className="text-3xl font-bold text-purple-700 mb-2">{songCounts.maybe}</div>
                <div className="text-sm font-semibold text-gray-800">If Mood Is Right</div>
                <div className="text-xs text-gray-700 mt-1">Optional songs</div>
              </div>
              <div className="bg-white p-6 rounded-lg border-2 border-gray-300 text-center">
                <div className="text-3xl font-bold text-purple-700 mb-2">{selectedForSetlist.size}</div>
                <div className="text-sm font-semibold text-gray-800">Selected for Setlist</div>
                <div className="text-xs text-gray-700 mt-1">Ready to arrange</div>
              </div>
            </div>
          </div>

          {/* Detailed Song Lists */}
          <div className="mb-8 p-6 bg-white rounded-lg border-2 border-gray-200">
            <h3 className="text-xl font-bold text-black mb-4 flex items-center">
              <span className="mr-2">📋</span>
              Detailed Song Selections
            </h3>
            
            {/* Tab Navigation */}
            <div className="mb-6">
              <div className="bg-gray-100 p-2 rounded-lg">
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => setSummaryTab('reception')}
                    className={`px-4 py-2 font-semibold rounded transition-all ${
                      summaryTab === 'reception' 
                        ? 'bg-black text-white' 
                        : 'bg-white text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Reception
                  </button>
                  <button
                    onClick={() => setSummaryTab('ceremony')}
                    className={`px-4 py-2 font-semibold rounded transition-all ${
                      summaryTab === 'ceremony' 
                        ? 'bg-black text-white' 
                        : 'bg-white text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Ceremony
                  </button>
                  <button
                    onClick={() => setSummaryTab('cocktail')}
                    className={`px-4 py-2 font-semibold rounded transition-all ${
                      summaryTab === 'cocktail' 
                        ? 'bg-black text-white' 
                        : 'bg-white text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Cocktail Hour
                  </button>
                  <button
                    onClick={() => setSummaryTab('afterparty')}
                    className={`px-4 py-2 font-semibold rounded transition-all ${
                      summaryTab === 'afterparty' 
                        ? 'bg-black text-white' 
                        : 'bg-white text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    After-Party
                  </button>
                </div>
              </div>
            </div>

            {/* Reception Tab Content */}
            {summaryTab === 'reception' && (
              <div className="space-y-6">
                {/* Definitely Play Songs */}
                {Object.entries(preferences).filter(([_, pref]) => pref === 'definitely').length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">✅</span>
                      Definitely Play! ({Object.entries(preferences).filter(([_, pref]) => pref === 'definitely').length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {Object.entries(preferences)
                        .filter(([_, pref]) => pref === 'definitely')
                        .map(([key]) => {
                          const [genre, index] = key.split('-');
                          const song = songsData?.[genre as keyof SongsDatabase]?.[parseInt(index)];
                          if (!song) return null;
                          return (
                            <div key={key} className="bg-white p-3 rounded border border-gray-300">
                              <div className="font-semibold text-black">{song.song}</div>
                              <div className="text-sm text-gray-700">{song.artist}</div>
                            </div>
                          );
                        })}
                    </div>
                  </div>
                )}

                {/* If Mood Is Right Songs */}
                {Object.entries(preferences).filter(([_, pref]) => pref === 'maybe').length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">🤔</span>
                      If Mood Is Right ({Object.entries(preferences).filter(([_, pref]) => pref === 'maybe').length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {Object.entries(preferences)
                        .filter(([_, pref]) => pref === 'maybe')
                        .map(([key]) => {
                          const [genre, index] = key.split('-');
                          const song = songsData?.[genre as keyof SongsDatabase]?.[parseInt(index)];
                          if (!song) return null;
                          return (
                            <div key={key} className="bg-white p-3 rounded border border-gray-300">
                              <div className="font-semibold text-black">{song.song}</div>
                              <div className="text-sm text-gray-700">{song.artist}</div>
                            </div>
                          );
                        })}
                    </div>
                  </div>
                )}

                {/* Reception Requests */}
                {receptionRequests.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">🎤</span>
                      Reception Requests ({receptionRequests.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {receptionRequests.map((request, index) => (
                        <div key={request.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{request.song}</div>
                          <div className="text-sm text-gray-700">{request.artist}</div>
                          {request.notes && <div className="text-xs text-gray-600 mt-1">{request.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Special Moments */}
                {specialMoments.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">⭐</span>
                      Special Moments ({specialMoments.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {specialMoments.map((moment, index) => (
                        <div key={moment.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{moment.type}</div>
                          <div className="text-sm text-gray-700">{moment.song} by {moment.artist}</div>
                          {moment.notes && <div className="text-xs text-gray-600 mt-1">{moment.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Ceremony Tab Content */}
            {summaryTab === 'ceremony' && (
              <div className="space-y-6">
                {/* Guest Arrival Requests */}
                {guestArrivalRequests.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">🚪</span>
                      Guest Arrival Requests ({guestArrivalRequests.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {guestArrivalRequests.map((request, index) => (
                        <div key={request.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{request.song}</div>
                          <div className="text-sm text-gray-700">{request.artist}</div>
                          {request.notes && <div className="text-xs text-gray-600 mt-1">{request.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Processional Songs */}
                {processionalSongs.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">👰</span>
                      Processional Songs ({processionalSongs.length})
                    </h4>
                    <div className="space-y-3">
                      {processionalSongs.map((song, index) => (
                        <div key={song.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                            <div>
                              <div className="font-semibold text-black">{song.title || 'Untitled'}</div>
                              <div className="text-sm text-gray-700">{song.artist || 'Unknown Artist'}</div>
                            </div>
                            <div className="text-sm text-gray-600">
                              <div><strong>Category:</strong> {song.category || 'Not specified'}</div>
                              <div><strong>Walkers:</strong> {song.walkerCount || 'Not specified'}</div>
                              {song.notes && <div><strong>Notes:</strong> {song.notes}</div>}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recessional Song */}
                {(recessionalSong.title || recessionalSong.artist) && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">💒</span>
                      Recessional Song
                    </h4>
                    <div className="bg-white p-3 rounded border border-gray-300">
                      <div className="font-semibold text-black">{recessionalSong.title || 'Not specified'}</div>
                      <div className="text-sm text-gray-700">{recessionalSong.artist || 'Not specified'}</div>
                      <div className="text-sm text-gray-600 mt-1">
                        <strong>Style:</strong> {recessionalSong.performanceStyle || 'Not specified'}
                        {recessionalSong.notes && <span> | <strong>Notes:</strong> {recessionalSong.notes}</span>}
                      </div>
                    </div>
                  </div>
                )}

                {/* Ceremony Special Moments */}
                {ceremonySpecialMoments.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">⛪</span>
                      Ceremony Special Moments ({ceremonySpecialMoments.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {ceremonySpecialMoments.map((moment, index) => (
                        <div key={moment.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{moment.type}</div>
                          <div className="text-sm text-gray-700">{moment.song} by {moment.artist}</div>
                          {moment.notes && <div className="text-xs text-gray-600 mt-1">{moment.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Cocktail Hour Tab Content */}
            {summaryTab === 'cocktail' && (
              <div className="space-y-6">
                {/* Cocktail Requests */}
                {cocktailRequests.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">🍸</span>
                      Cocktail Hour Requests ({cocktailRequests.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {cocktailRequests.map((request, index) => (
                        <div key={request.id} className="bg-white p-3 rounded border border-orange-300">
                          <div className="font-semibold text-black">{request.song}</div>
                          <div className="text-sm text-gray-700">{request.artist}</div>
                          {request.notes && <div className="text-xs text-gray-600 mt-1">{request.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Cocktail Special Moments */}
                {cocktailSpecialMoments.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">⭐</span>
                      Cocktail Special Moments ({cocktailSpecialMoments.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {cocktailSpecialMoments.map((moment, index) => (
                        <div key={moment.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{moment.type}</div>
                          <div className="text-sm text-gray-700">{moment.song} by {moment.artist}</div>
                          {moment.notes && <div className="text-xs text-gray-600 mt-1">{moment.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* After-Party Tab Content */}
            {summaryTab === 'afterparty' && (
              <div className="space-y-6">
                {/* After-Party Requests */}
                {afterpartyRequests.length > 0 && (
                  <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                    <h4 className="text-lg font-bold text-black mb-3 flex items-center">
                      <span className="mr-2">🎉</span>
                      After-Party Requests ({afterpartyRequests.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {afterpartyRequests.map((request, index) => (
                        <div key={request.id} className="bg-white p-3 rounded border border-gray-300">
                          <div className="font-semibold text-black">{request.song}</div>
                          <div className="text-sm text-gray-700">{request.artist}</div>
                          {request.notes && <div className="text-xs text-gray-600 mt-1">{request.notes}</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>




          {/* Completion Status */}
          <div className="p-6 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-lg border-2 border-gray-200">
            <h3 className="text-xl font-bold text-black mb-4 flex items-center">
              <span className="mr-2">📋</span>
              Planning Status
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-black mb-3">Completed Sections</h4>
                <div className="space-y-2">
                  <div className="flex items-center">
                    <span className="text-purple-600 mr-3 text-lg">✓</span>
                    <span className="text-sm">Event Information</span>
                  </div>
                  <div className="flex items-center">
                    <span className="text-purple-600 mr-3 text-lg">✓</span>
                    <span className="text-sm">Contacts</span>
                  </div>
                  <div className="flex items-center">
                    <span className="text-purple-600 mr-3 text-lg">✓</span>
                    <span className="text-sm">Ceremony Music</span>
                  </div>
                  <div className="flex items-center">
                    <span className="text-purple-600 mr-3 text-lg">✓</span>
                    <span className="text-sm">Reception Planning</span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="font-semibold text-black mb-3">Next Steps</h4>
                <div className="space-y-2 text-sm text-gray-600">
                  <div className="flex items-start">
                    <span className="text-blue-600 mr-2">•</span>
                    <span>Review and finalize song selections</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-blue-600 mr-2">•</span>
                    <span>Confirm ceremony timing and cues</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-blue-600 mr-2">•</span>
                    <span>Submit final music preferences</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-blue-600 mr-2">•</span>
                    <span>Schedule final planning call</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Band Prep Access - Admin Only */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <div className="text-center">
              <p className="text-sm text-gray-500 mb-3">Admin access only</p>
              <button
                onClick={() => setShowBandPrep(true)}
                className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-all shadow-lg hover:shadow-xl"
              >
                Band Prep →
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Music Summary section removed */}

      {/* Vendor Recommendations Page */}
                              type="text"
                              value={request.notes}
                              onChange={(e) => updateReceptionRequest(request.id, 'notes', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {receptionRequests.length < 2 && (
                    <button
                      onClick={addReceptionRequest}
                      className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                    >
                      + Add Essential Request
                    </button>
                  )}
                </div>

                {/* Additional Requests */}
                <div className="mb-8">
                  <h3 className="text-xl font-bold text-black mb-4">Additional Requests (up to 5)</h3>
                  <p className="text-sm text-gray-600 mb-4">Your musical moodboard - we&apos;ll play as many as possible</p>
                  
                  <div className="space-y-4">
                    {receptionRequests.filter((_, index) => index >= 2).map((request, index) => (
                      <div key={request.id} className="bg-white p-4 rounded border-2 border-gray-300">
                        <div className="flex justify-between items-start mb-4">
                          <h5 className="text-lg font-bold text-black">Additional Request {index + 1}</h5>
                          <button
                            onClick={() => removeReceptionRequest(request.id)}
                            className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                          >
                            Remove
                          </button>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Song</label>
                            <input
                              type="text"
                              value={request.song}
                              onChange={(e) => updateReceptionRequest(request.id, 'song', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Artist</label>
                            <input
                              type="text"
                              value={request.artist}
                              onChange={(e) => updateReceptionRequest(request.id, 'artist', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Spotify/YouTube Link (optional)</label>
                            <input
                              type="url"
                              value={request.link}
                              onChange={(e) => updateReceptionRequest(request.id, 'link', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-bold text-black mb-2">Notes</label>
                            <input
                              type="text"
                              value={request.notes}
                              onChange={(e) => updateReceptionRequest(request.id, 'notes', e.target.value)}
                              className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {receptionRequests.length < 7 && (
                    <button
                      onClick={addReceptionRequest}
                      className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                    >
                      + Add Additional Request
                    </button>
                  )}
                </div>

                {/* Playlist Links */}
                <div>
                  <h3 className="text-xl font-bold text-black mb-4">Playlist Links</h3>
                  <p className="text-sm text-gray-600 mb-4">Share playlists for us to reference - we&apos;ll treat these as additional requests</p>
                  
                  {/* Required Dinner Playlist */}
                  <div className="mb-6 p-4 bg-red-50 rounded-lg border-2 border-red-300">
                    <h4 className="text-lg font-bold text-black mb-4">Required: Dinner Playlist</h4>
                    <p className="text-sm text-gray-600 mb-4">This playlist will play during our break while you&apos;re having dinner</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-bold text-black mb-2">Dinner Playlist Link *</label>
                        <input
                          type="text"
                          value={dinnerPlaylist}
                          onChange={(e) => setDinnerPlaylist(e.target.value)}
                          className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          placeholder="Spotify/Apple Music/YouTube playlist link"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-bold text-black mb-2">Notes (optional)</label>
                        <input
                          type="text"
                          value={dinnerPlaylistNotes}
                          onChange={(e) => setDinnerPlaylistNotes(e.target.value)}
                          className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                          placeholder="Any special instructions for dinner music"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Additional Playlists */}
                  <div>
                    <h4 className="text-lg font-bold text-black mb-4">Additional Playlists (Optional)</h4>
                    <div className="space-y-4">
                      {playlistLinks.map((playlist, index) => (
                        <div key={playlist.id} className="bg-white p-4 rounded border-2 border-gray-300">
                          <div className="flex justify-between items-start mb-4">
                            <h5 className="text-lg font-bold text-black">Additional Playlist {index + 1}</h5>
                            <button
                              onClick={() => removePlaylistLink(playlist.id)}
                              className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                            >
                              Remove
                            </button>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-bold text-black mb-2">Playlist Type</label>
                              <select
                                value={playlist.type}
                                onChange={(e) => updatePlaylistLink(playlist.id, 'type', e.target.value)}
                                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                              >
                                <option value="">Select playlist type...</option>
                                <option value="dancing">Dancing Requests</option>
                                <option value="background">Background Music</option>
                                <option value="slow">Slow Songs</option>
                                <option value="party">Party Anthems</option>
                                <option value="general">General Requests</option>
                              </select>
                            </div>
                            <div>
                              <label className="block text-sm font-bold text-black mb-2">Playlist Link</label>
                              <input
                                type="text"
                                value={playlist.link}
                                onChange={(e) => updatePlaylistLink(playlist.id, 'link', e.target.value)}
                                className="w-full p-2 border-2 border-gray-300 rounded text-gray-900"
                                placeholder="Spotify/Apple Music/YouTube playlist link"
                              />
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    <button
                      onClick={addPlaylistLink}
                      className="w-full p-3 border-2 border-dashed border-purple-400 rounded text-purple-600 hover:border-gray-500 hover:text-purple-700 font-semibold"
                    >
                      + Add Additional Playlist
                    </button>
                  </div>
                </div>
              </>
            )}

            {receptionTab === 'songlist' && songsData && (
              <>
                <div className="border-l-4 border-purple-600 pl-4 mb-6">
                  <h2 className="text-3xl font-bold text-black">The Hook Club Song List</h2>
                  <p className="text-gray-600 mt-2">Browse our repertoire and let us know your preferences</p>
                </div>

                {/* Song Progress Tracker */}
                <div className="mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
                  <h3 className="text-lg font-bold text-black mb-4 text-center">🎵 Song Progress</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {/* Definitely Play Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-purple-700">Definitely Play</span>
                        <span className="text-sm font-bold text-purple-700">{songCounts.definitely}/∞</span>
                    </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            songCounts.definitely >= 25 && songCounts.definitely <= 50 
                              ? 'bg-white0' 
                              : songCounts.definitely < 25 
                              ? 'bg-white0' 
                              : 'bg-red-500'
                          }`}
                          style={{ width: `${Math.min((songCounts.definitely / 50) * 100, 100)}%` }}
                        ></div>
                    </div>
                      <div className="text-xs text-gray-600">Goal: 25-50 songs</div>
                      {songCounts.definitely < 25 && (
                        <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                      )}
                      {songCounts.definitely > 50 && (
                        <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                      )}
                    </div>

                    {/* If Mood Is Right Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-purple-700">If Mood Is Right</span>
                        <span className="text-sm font-bold text-purple-700">{songCounts.maybe}/∞</span>
                  </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            songCounts.maybe >= 25 
                              ? 'bg-white0' 
                              : 'bg-white0'
                          }`}
                          style={{ width: `${Math.min((songCounts.maybe / 25) * 100, 100)}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600">Goal: ≥25 songs</div>
                      {songCounts.maybe < 25 && (
                        <div className="text-xs text-yellow-600 mt-1">⚠️ Need more songs</div>
                      )}
                </div>

                    {/* Avoid Playing Progress */}
                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold text-red-700">Avoid Playing</span>
                        <span className="text-sm font-bold text-red-700">{songCounts.avoid}/∞</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            songCounts.avoid <= 50 
                              ? 'bg-white0' 
                              : 'bg-red-500'
                          }`}
                          style={{ width: `${Math.min((songCounts.avoid / 50) * 100, 100)}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600">Goal: ≤50 songs</div>
                      {songCounts.avoid > 50 && (
                        <div className="text-xs text-red-600 mt-1">⚠️ Over recommended limit</div>
                      )}
                    </div>
                  </div>

                  {/* Genre Breakdown */}
                  <div className="mt-4 p-3 bg-gray-50 rounded">
                    <div className="text-sm font-semibold text-gray-700 mb-3 text-center">Genre Breakdown</div>
                    <div className="flex items-end space-x-1 h-16">
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Pop</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '20%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">5</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Soul/R&B</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '15%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">3</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Rock</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-red-500 rounded-t" style={{ height: '25%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">8</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Hip-Hop</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '10%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">2</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Disco</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '30%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">12</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Pop Punk</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '5%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">1</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Country</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '8%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">2</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Latin</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-pink-500 rounded-t" style={{ height: '12%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">3</div>
                      </div>
                      <div className="flex-1 text-center">
                        <div className="text-xs text-gray-600 mb-1">Ballads</div>
                        <div className="w-full bg-gray-200 rounded-t h-8 flex items-end">
                          <div className="w-full bg-white0 rounded-t" style={{ height: '18%' }}></div>
                        </div>
                        <div className="text-xs text-gray-500 mt-1">4</div>
                      </div>
                    </div>
                  </div>
                </div>


                <div className="space-y-4">
                  {Object.entries(songsData).filter(([genre, _]) => genreStatus[genre]).map(([genre, songs]) => (
                    <div key={genre} className="border-2 border-gray-300 rounded-lg overflow-hidden">
                      <button
                        onClick={() => toggleGenre(genre)}
                        className="w-full p-4 bg-gray-100 hover:bg-gray-200 flex items-center justify-between transition-all"
                      >
                        <h3 className="text-xl font-bold text-black">{GENRE_TITLES[genre] || genre}</h3>
                        <span className="text-2xl text-gray-600">
                          {expandedGenres.has(genre) ? '−' : '+'}
                        </span>
                      </button>
                      {expandedGenres.has(genre) && (
                        <div className="p-4 bg-white space-y-2">
                          {songs.sort((a: any, b: any) => {
                            const artistA = (a.thcArtist || a.originalArtist || '').toLowerCase();
                            const artistB = (b.thcArtist || b.originalArtist || '').toLowerCase();
                            return artistA.localeCompare(artistB);
                          }).map((song: {song: string, artist: string, videoUrl: string}, index: number) => (
                            <SongRow 
                              key={`${genre}-${index}`}
                              song={song.song}
                              artist={song.artist}
                              videoUrl={song.videoUrl}
                              prefKey={`${genre}-${index}`}
                            />
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </>
            )}
          </div>

      {/* Vendor Recommendations Page */}
      {mainTab === 'vendor-recommendations' && (
        <div className="bg-white border-2 border-gray-300 rounded-lg shadow-lg p-8">
          <div className="border-l-4 border-purple-600 pl-4 mb-6">
            <h2 className="text-3xl font-bold text-black">Vendor Recommendations</h2>
            <p className="text-gray-600 mt-2">Trusted wedding professionals we love working with</p>
          </div>

          <div className="space-y-8">
            {/* Wedding Planners */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">📋 Wedding Planners</h3>
              
              {/* Full-Service Planners */}
              <div className="mb-6">
                <h4 className="text-lg font-semibold text-black mb-4">Full-Service Planners</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Ali Barone Events</h5>
                    <a href="https://alibaroneevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">alibaroneevents.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Arch Events</h5>
                    <a href="https://archeventsnyc.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">archeventsnyc.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Canvas</h5>
                    <a href="https://canvaswedding.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">canvaswedding.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Christofora Events</h5>
                    <a href="https://christoforaevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">christoforaevents.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Dawn Mauberret Events</h5>
                    <a href="https://dawnmauberretevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">dawnmauberretevents.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Deborah Minarik</h5>
                    <a href="https://deborahminarikevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">deborahminarikevents.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">DM Events & Design</h5>
                    <a href="https://dmeventsny.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">dmeventsny.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Events by Jesse</h5>
                    <a href="https://www.eventsbyjesse.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">www.eventsbyjesse.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Farrah Bridal Styling</h5>
                    <a href="https://fabridalstyling.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">fabridalstyling.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Gina Maloney</h5>
                    <a href="https://ginamaloneyevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">ginamaloneyevents.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Modern Rebel</h5>
                    <a href="https://modernrebelco.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">modernrebelco.com</a>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">The Get Together</h5>
                    <a href="https://thegettogetherevents.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">thegettogetherevents.com</a>
                  </div>
                </div>
              </div>

              {/* Day-Of Coordinators */}
              <div>
                <h4 className="text-lg font-semibold text-black mb-4">Day-Of Coordinators</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h5 className="font-bold text-black mb-2">Cheersy</h5>
                    <a href="https://cheersy.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">cheersy.com</a>
                  </div>
                </div>
              </div>
            </div>

            {/* Photography */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">📸 Photography</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Abby Miller</h5>
                  <a href="https://abbylphoto.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">abbylphoto.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Bo Shim</h5>
                  <a href="https://boshimphotography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">boshimphotography.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Brindamour Studios</h5>
                  <a href="https://brindamourstudios.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">brindamourstudios.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Bryan Sargent</h5>
                  <a href="https://bryansargentphotography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">bryansargentphotography.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Cassie Castellaw</h5>
                  <a href="https://cassiecastellaw.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">cassiecastellaw.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Erica Reade</h5>
                  <a href="https://ericareadephotography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">ericareadephotography.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">HJ Photo</h5>
                  <a href="https://hjphotonyc.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">hjphotonyc.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Holtz Photography</h5>
                  <a href="https://holtzweddingphotography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">holtzweddingphotography.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Jaymo James</h5>
                  <a href="https://jaymojaymes.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">jaymojaymes.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Kelly Prizel</h5>
                  <a href="https://kellyprizel.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">kellyprizel.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Maya Lovro</h5>
                  <a href="https://mayalovro.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">mayalovro.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Megan & Kenneth</h5>
                  <a href="https://meganandkenneth.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">meganandkenneth.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Megan Niger</h5>
                  <a href="https://meganniger.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">meganniger.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Ready Luck Photography</h5>
                  <a href="https://readyluck.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">readyluck.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">The Brenizers</h5>
                  <a href="https://thebrenizers.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">thebrenizers.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Unique Lapin</h5>
                  <a href="https://uniquelapin.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">uniquelapin.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Wandermore Photography</h5>
                  <a href="https://wandermorephotography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">wandermorephotography.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Weddings by Nato</h5>
                  <a href="https://weddingsbynato.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">weddingsbynato.com</a>
                </div>
              </div>
            </div>

                  {/* Videography */}
                  <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
                    <h3 className="text-2xl font-bold text-black mb-4">📹 Videography</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      <div className="bg-gradient-to-r from-purple-100 to-pink-100 p-4 rounded-lg border-2 border-gray-300">
                        <h5 className="font-bold text-black mb-2">The Hook Club</h5>
                        <p className="text-xs text-gray-600 mb-2">Yes, we offer videography!</p>
                        <a href="https://thehookclub.nyc/videography" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline font-semibold">thehookclub.nyc/videography</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">AJ Ingoglia Films</h5>
                        <a href="https://ajingogliafilms.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">ajingogliafilms.com</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">Cinemarvel Films</h5>
                        <a href="https://cinemarvelfilms.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">cinemarvelfilms.com</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">Glass Planet</h5>
                        <a href="https://glassplanetvideography.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">glassplanetvideography.com</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">Heather Bay</h5>
                        <a href="https://heatherbayfilms.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">heatherbayfilms.com</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">Reel Feels</h5>
                        <a href="https://reelfeelsvideo.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">reelfeelsvideo.com</a>
                      </div>
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-bold text-black mb-2">Silver Fox Studios</h5>
                        <a href="https://silverfoxvideo.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">silverfoxvideo.com</a>
                      </div>
                    </div>
                  </div>

            {/* Photo Booth */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">🖼️ Photo Booth</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">321 Photo Booth</h5>
                  <a href="https://321photobooth.nyc" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">321photobooth.nyc</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">AmazeBooths</h5>
                  <a href="https://amazebooths.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">amazebooths.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Brindamour Booth</h5>
                  <a href="https://brindamourstudios.com/photobooth" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">brindamourstudios.com/photobooth</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">FLUX</h5>
                  <a href="https://fluxphotoboothcompany.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">fluxphotoboothcompany.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">NYC Party Booth</h5>
                  <a href="https://nycpartybooth.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">nycpartybooth.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">The Bosco</h5>
                  <a href="https://thebosco.com/get-the-bosco" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">thebosco.com/get-the-bosco</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">The Gold Booth</h5>
                  <a href="https://thegoldbooth.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">thegoldbooth.com</a>
                </div>
              </div>
            </div>

            {/* Catering */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">🍽️ Catering</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Jillicious Foods</h5>
                  <a href="https://jilliciousfoods.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">jilliciousfoods.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Night Kitchen</h5>
                  <a href="https://nightkitchencatering.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">nightkitchencatering.com</a>
                </div>
              </div>
            </div>

            {/* Florist */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">🌸 Florist</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Flower Clvb</h5>
                  <a href="https://flowerclvb.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">flowerclvb.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Little Spoon</h5>
                  <a href="https://littlespoonsouthfork.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">littlespoonsouthfork.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Petals and Roots</h5>
                  <a href="https://petalsandrootsny.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">petalsandrootsny.com</a>
                </div>
              </div>
            </div>

            {/* Lighting */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">💡 Lighting</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Caramel Sound Music & Lights</h5>
                  <a href="https://caramelnyc.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">caramelnyc.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Christie Lights</h5>
                  <a href="https://christielites.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">christielites.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Shades of Grey</h5>
                  <a href="https://shadesofgrey.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">shadesofgrey.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Squeek Lights</h5>
                  <a href="https://squeeklights.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">squeeklights.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Universal Light & Sound</h5>
                  <a href="https://ulsnyc.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">ulsnyc.com</a>
                </div>
              </div>
            </div>

            {/* Staging */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">🎭 Staging</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Big Dawg Party Rentals</h5>
                  <a href="https://bigdawpartyrentals.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">bigdawpartyrentals.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Broadway Party Rental</h5>
                  <a href="https://broadwaypartyrentals.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">broadwaypartyrentals.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Party Rental Ltd</h5>
                  <a href="https://partyrentalltd.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">partyrentalltd.com</a>
                </div>
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Taylor Productions</h5>
                  <a href="https://taylorproductions.co" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">taylorproductions.co</a>
                </div>
              </div>
            </div>

            {/* Makeup */}
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-2 border-gray-200 p-6">
              <h3 className="text-2xl font-bold text-black mb-4">💄 Makeup</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 className="font-bold text-black mb-2">Vero Leigh</h5>
                  <a href="https://www.veroleigh.com" target="_blank" rel="noopener noreferrer" className="text-sm text-purple-600 hover:underline">www.veroleigh.com</a>
                </div>
              </div>
            </div>

            {/* Back to Contacts Button */}
            <div className="text-center mt-8">
              <button
                onClick={() => setMainTab('contacts')}
                className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-all shadow-lg hover:shadow-xl"
              >
                ← Back to Contacts
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}